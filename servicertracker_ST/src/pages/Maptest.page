<apex:page controller="MapControllertest" showHeader="true" sidebar="false">	
    <html>
        <head>    
            <title>Route Optimisation</title>
            <script src="./../soap/ajax/43.0/connection.js" type="text/javascript"></script>
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
            <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
            <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
            <script src="https://api.mqcdn.com/sdk/mapquest-js/v1.3.1/mapquest.js"></script>
            <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyADm2b2UTMuHGVx30-5JxUDAUXv8Uo7m4E"></script>
            <link rel="stylesheet" href="https://api.mqcdn.com/sdk/mapquest-js/v1.3.1/mapquest.css"/>
            
            <style>
                #date_container {
                display: flex;
                justify-content: center;
                }
                .result{
                display: flex;
                flex-direction: column;
                }
                .header .footer{
                flex:none;
                text-align: center;
                width: 100%;
                }
                .container{
                display: flex;
                flex: 1 0 auto;
                flex-direction: colum;
                padding: 1em;
                height:60vh;
                }
                .main{
                margin-top: 1em;
                order:1;
                }
                .right{order: 2;}
                .left{
                order: -1;
                }
                .left .right{
                padding: 1em;
                border-radius: 3px;
                background: rgba(147, 128, 108, 0.1);
                width:20vw;
                }
                .left{
                   overflow:auto;
                }
                
                @media (min-width: 768px) {
                .container {
                flex-direction: row;
                }
                .main {
                flex: 1;
                padding: 1em;
                margin: 0;
                }
                .left .right {
                flex: 0 0 12em;
                }
                }
                
            </style>
            
            
            <script type="text/javascript">
            //distribute the Monday-Starday
            var resources = [];
            var territories = [];
            window.onload = function() {
                
                //generate the HTML and add name
                <apex:repeat value="{!objectResource}" var="resource" id="resources">
                    var pResource=document.createElement("label");
                var node=document.createTextNode('{!resource.name}');
                var element=document.getElementById("resource");
                pResource.appendChild(node);
                element.appendChild(pResource);
                var checkboxResource=document.createElement("input");
                checkboxResource.name="resource";
                checkboxResource.value='{!resource.Id}';
                checkboxResource.setAttribute('type', 'checkbox');
                element.appendChild(checkboxResource);
                
                
                var resource ={
                    name: '{!resource.name}',
                    id:'{!resource.Id}',
                };
                resources.push(resource);
                
                </apex:repeat>
            }
            
            
            
            
            $(document).ready(function(){
                var status = 0;
                $("#result").show();
                
                //js json Ajax
                $("#matrixForm").submit(function(event){
                    start();
                    //sameLocation(visitData,accountLocation);
                    //var mappingJson=JSON.stringify({locations,options:allToAll});
                });
            });
            function start(){
                //getting data from the Form.
                var rawData=$("#matrixForm").serializeArray();
                console.log('rawdata');
                console.log(rawData);
                //prevent send request
                event.preventDefault();
                var resource=[];
                var accountLocation=[];
                var accoutSame=[];
                //get the visitData
                var visitData=requestToSforce(rawData);
                
                console.log(visitData);
                //get the resourcedata
                var resourceData=requestResource(rawData);
                //get the different Json file
                //console.log(resourceData);
                var resourGroup=[];
                var sameLocation=[];
                var jsonList=[];
                var sameLocationId=[];
                var sameList=[];
                var fixVisit=[];
                for(var i=0;i<resourceData.length;i++){
                    var geolocation=seperatevisit(visitData[i]);
                    var same=groupLocation(visitData[i]);
                    var fixvisit=seperateFixVisit(visitData[i]);
                    fixVisit.push(fixvisit);
                    //add fix location
                    geolocation=addFixlocation(geolocation,resourceData[i]);
                    sameList.push(same);
                    resourGroup.push(geolocation);
                    //
                    var generatejson=generateMapJson(geolocation,sameLocationId);
                    jsonList.push(generatejson);
                }
                getTravelTime(jsonList,resourGroup,rawData,sameList,sameLocationId,fixVisit,resourceData,visitData);
                //distance.push(getDistance(geolocation[keys]);
                //var result=checkLocation(geolocation,resourceData);
                
                //console.log(result);
                
                //var generatejson=generateMapJson(rawData,visitData,result);
                console.log("show result please");
                
            }
            function addFixlocation(geolocation,resource){
                geolocation[resource.records.Id]=[resource.records.STKR__Fixed_Location__Latitude__s,resource.records.STKR__Fixed_Location__Longitude__s];
                return geolocation;
            }
            /*consider about the multiple location > 25, which is limited for mapquest
            
            */
            function groupLocation(geolocation){
                var result=jQuery.extend(true,{},geolocation);
                var distanceObj={};
                var temi=[];
                var temj=[];
                for(var i in geolocation){
                    for(j in geolocation){
                        if(i!=j){
                            var key=i+","+j;
                            temi.push(i);
                            temj.push(j);
                            var distance=getDistance(geolocation[i],geolocation[j]);
                            distanceObj[key]=distance;
                        }
                    }
                    delete geolocation[i];
                } 
                keysSorted=Object.keys(distanceObj).sort(function(a,b){return distanceObj[a]-distanceObj[b]});
                //maybe need values for checking wether we need group the location
                values=Object.keys(distanceObj).sort(function(a,b){return distanceObj[a]-distanceObj[b]}).map(key => distanceObj[key]);
                var lastIndex=keysSorted[0].indexOf(",");
                var s1=keysSorted[0].substring(0,lastIndex);
                var s2=keysSorted[0].substring(lastIndex+1);
                var s3=s1+","+s2;
                if(result[s1]=== undefined||result[s2]===undefined){
                    var tem=keysSorted[0].split(",");
                    for(var i=0;i<tem.length;i++){
                        
                        lastIndex=keysSorted[0].indexOf(",");
                        lastIndex=Number(lastIndex)*Number(i)+18+i;
                        s1=keysSorted[0].substring(0,lastIndex);
                        s2=keysSorted[0].substring(lastIndex+1);
                        if(result[s1]!=undefined){
                            break;
                        }
                    }
                }
                var midlocation=middlePoint(result[s1],result[s2]);
                
                result[s3]=midlocation;
                delete result[s1];
                delete result[s2];
                
                return result;
            }
            
            function middlePoint(location1,location2) {
                var lat1=location1[0];
                var lng1=location1[1];
                var lat2=location2[0];
                var lng2=location2[1];
                
                lat1 = lat1 * 0.017453292519943295;
                lng1 = lng1 * 0.017453292519943295;
                lat2 =lat2 * 0.017453292519943295;
                lng2 = lng2 * 0.017453292519943295;
                
                dlng = lng2 - lng1;
                Bx = Math.cos(lat2) * Math.cos(dlng);
                By = Math.cos(lat2) * Math.sin(dlng);
                lat3 = Math.atan2( Math.sin(lat1)+Math.sin(lat2),
                                  Math.sqrt((Math.cos(lat1)+Bx)*(Math.cos(lat1)+Bx) + By*By ));
                lng3 = lng1 + Math.atan2(By, (Math.cos(lat1) + Bx));
                pi = 3.141592653589793;
                lat = (lat3*180)/pi;
                lng = (lng3*180)/pi;
                return [lat.toString(),lng.toString()];
            }
            
            function getDistance(location1,location2) {
                var lat1=location1[0];
                var lon1=location1[1];
                var lat2=location2[0];
                var lon2=location2[1];
                var R = 6371; // Radius of the earth in km
                var dLat = deg2rad(lat2-lat1);  // deg2rad below
                var dLon = deg2rad(lon2-lon1); 
                var a = 
                    Math.sin(dLat/2) * Math.sin(dLat/2) +
                    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
                    Math.sin(dLon/2) * Math.sin(dLon/2); 
                var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
                var d = R * c; // Distance in km
                return d;
            }
            
            function deg2rad(deg) {
                return deg * (Math.PI/180)
            }
            
            function checkLocation(geolocation,resourceData){
                console.log(Object.keys(geolocation).length);
                if(Number(resourceData.size)+Number(Object.keys(geolocation).length)>25){
                    //geolocation=seperateLocation(geolocation);
                    var result=groupLocation(geolocation);
                    console.log("this is the your dead fucking loop");
                    checkLocation(result,resourceData);
                }else{
                    return geolocation;
                }
            }
            
            function seperateLocation(geolocation){
                var distance={};
                for(keys in geolocation){
                    geolocation[keys],geolocation[keys]
                    //distance.push(getDistance(geolocation[keys]);
                }                
            }
            
            /*change the UI show the result on web page
            
            */
            
            function generateDayList(rawdata,optimizationday,resource,visit,arguments,sameList,sameLocation,fixvisit,resourceNum,dayfixvist){
                console.log('generateDayList');
                console.log(optimizationday);
                console.log(resource);
                console.log(fixvisit);
                console.log(resourceNum);
                //transform the optimizationday to previous format, it will fit for our previous code.
                var optimisationdays={}
                for(var i in optimizationday){
                    optimisationdays[i]={};                    
                    var lastelement;
                    for(var j in optimizationday[i]){
                        console.log(optimizationday[i][j]);
                        console.log('givemesomemagicplea');
                        var tem=j.split(',');
                        if(typeof lastelement==='undefined'){
                            optimisationdays[i][tem[0]]=optimizationday[i][j];
                            lastelement=tem;
                            continue;
                        }
                        if(tem[0]===lastelement[0]){
                            console.log(optimizationday[i][lastelement.toString()]);
                            console.log(optimizationday[i])
                            console.log('comememagic');
                            optimisationdays[i][tem[0]]=optimizationday[i][lastelement.toString()].concat(optimizationday[i][j]);
                        }else{
                            optimisationdays[i][tem[0]]=optimizationday[i][j];
                        }
                        lastelement=tem;
                        
                    }
                }
                console.log('givememyoptimisationdays');
                var days = Math.round(Math.abs((new Date(rawdata[1].value).getTime()-new Date(rawdata[0].value).getTime())/(24*60*60*1000)));
                var startday=new Date(rawdata[0].value);
                console.log(startday);
                var index=0;
                var startdayCopy=new Date(startday);
                for(var i=1;i<days+1;i++){
                    startdayCopy.setDate(startdayCopy.getDate()+(i));
                    console.log(startdayCopy);
                    console.log('final result')
                    console.log(optimisationdays)
                    for(var j in optimisationdays){
                        if(typeof optimisationdays[j][i] != 'undefined'){
                            var r=$('<div><button value="'+j+','+i+'" style="width:100px"; >'+Number(startdayCopy.getDate())+'/'+(Number(startdayCopy.getMonth())+1)+' '+generatename(j,optimisationdays,resource)+'</button></div>');
                            $("#dayresult").show().append(r);
                        }
                    }
                    startdayCopy=new Date(startday);
                    
                    index++;
                }
                //IMPORTANT: cannot scroll now
                $("#dayresult").scroll(function(){
                    console.log("scrolling")
                });
                
                
                $("#dayresult").children("div").click({param1: optimisationdays, param2: resource, param3: visit,param4:arguments,param5:sameList,param6:sameLocation,param7:fixvisit,param8:optimizationday},drawmap);
                
                $("#dayresult").children("div").click(function(){
                    var buttonvalue=$(this).children("button").text();
                    var info=buttonvalue.split(' ');
                    $("#information").text('it is schedule for '+info[1]+' in '+info[0]);
                });             
            }
            //IMPORTANT insert fixvisit compare with initialoptimisation and optimisation and dayfixvist or fixvisit
            function drawmap(event){
                var value=$(this).children("button").attr('value');
                var optimisation=event.data.param1;
                var resource=event.data.param2;
                var visit=event.data.param3;
                var sameList=event.data.param5;
                var sameLocation=event.data.param6;
                var fixvisit=event.data.param7;
                var initialOptimisation=event.data.param8;
                console.log(initialOptimisation);
                console.log('thisis myvaluevalue');
                console.log(event.data.param1);
                console.log(event.data.param2);
                console.log(event.data.param3);
                console.log('thisfdasdifhisdfixvisit');
                console.log(fixvisit);
                console.log(value);
                var arguments=event.data.param4;
                
                var temarr=value.split(',');
                console.log(temarr[0]);
                console.log(temarr[1]);
                var fixgeolocation;
                var index;
                //if there are fixvisit in the day and how many fixvisit in the day
                for(var i=0;i<resource.length;i++){
                    if(resource[i].records.Id==temarr[0]){
                        index=i;
                        fixgeolocation=Number(resource[i].records.STKR__Fixed_Location__Latitude__s)+","+Number(resource[i].records.STKR__Fixed_Location__Longitude__s);
                        /*
                        if(!isEmpty(fixvisit[i])){
                        for(var i in fixvisit[i]){
                        	
                        }
                        }
                        */
                    }
                }
                var visitgeolocation=[];
                console.log('this is myoptimisation');
                console.log(optimisation);
                console.log(optimisation[temarr[0]][Number(temarr[1])])
                for(var i=0;i<optimisation[temarr[0]][Number(temarr[1])].length;i++){
                    visitgeolocation.push({
                        location: Number(visit[index].records[optimisation[temarr[0]][temarr[1]][i]].STKR__Account_lkp__r.STKR__location__Latitude__s)+","+Number(visit[index].records[optimisation[temarr[0]][temarr[1]][i]].STKR__Account_lkp__r.STKR__location__Longitude__s),
                        stopover: true
                    });
                }
                console.log(visitgeolocation);
                /*
                if(map != undefined || map != null){
                	map.remove();
                }*/
                
                var directionsDisplay= new google.maps.DirectionsRenderer;
                var directionsService = new google.maps.DirectionsService;
                
                
                var map=new google.maps.Map(document.getElementById('map'),{
                    center:{lat: 51.570767, lng:-3.203604},
                    zoom:8
                });
                directionsDisplay.setMap(map);
                console.log(visitgeolocation);
                directionsService.route({
                    origin:fixgeolocation,
                    destination:fixgeolocation,
                    waypoints:visitgeolocation,
                    optimizeWaypoints:true,
                    travelMode:'DRIVING'
                }, function (response, status){
                    if(status==='OK'){
                        directionsDisplay.setDirections(response);
                        var route = response.routes[0];
                        rightresult(route);
                    }else{
                        window.alert('Directions request failed due to ' + status);
                    }
                });
            }
            
            //IMPORTANT
            //draggable function and show the result
            function rightresult(route){
                console.log('thisimurightresulr');
                console.log(route.legs);
                var resultTime;
                var resultDistance;
                for(var i=0;i<route.legs.length;i++){
                    resultTime += route.legs[i].duration.value;
                    resultDistance += route.legs[i].distance.value;
                }
                $("#resultTime").text(resultTime);
                $("#resultCost").text('it is schedule for');
                $("#resultDistance").text(resultDistance);
                $("#resultCapability").text('it is schedule for');
                
                
                
            }
            function generatename(j,optimizationday,resource){
                for(var i=0;i<resource.length;i++){
                    if(j==resource[i].records.Id){
                        return resource[i].records.Name;
                    }
                }
            }
            // generate the Json file
            //input :specific date and resource, territory output: the location 
            
            //input: data from the mapquest response. output: the time and distance
            function getTravelTime(jsonList,resourGroup,rawData,sameList,sameLocationId,fixVisit,resourceData,visitData){
                var promises=[];
                for(var i=0;i<resourGroup.length;i++){
                    var request=$.ajax({
                        
                        type: 'POST',
                        dataType: 'jsonp',
                        contentType: 'json',
                        url: "http://www.mapquestapi.com/directions/v2/routematrix",
                        data: {key: decodeURI("9OPZGbOK3RgIGasHYyqClBVt4IPbIpks"),
                               json: jsonList[i]}
                    });
                    promises.push(request);
                    
                    //console.log(timelist);
                }
                console.log('about to wait....' );            
                $.when.apply($, promises).done(function(jsonp){
                    var resourceNum={};
                    var dayfixvistGroup={};
                    var optimisationarry=optimisation(arguments,resourGroup,rawData,sameList,sameLocationId,fixVisit,resourceData,visitData,resourceNum,dayfixvistGroup);
                    generateDayList(rawData,optimisationarry,resourceData,visitData,arguments,sameList,sameLocationId,fixVisit,resourceNum,dayfixvistGroup);
                    
                });
                
            }
            
            
            function generateLocation(data){
                console.log(data);
                var result=[];
                for(var i=0;i<data.length;i++){
                    console.log(data[i]);
                    if(data[i].size=="1"){
                        if(data[i].records.type=="STKR__Resource__c"){
                            result.push([Number(data[i].records.STKR__Fixed_Location__Latitude__s),Number(data[i].records.STKR__Fixed_Location__Longitude__s)]);
                        }
                    }
                }
                return result;
            }
            //try to cluster the location 
            
            function sameLocation(visitData,accountLocation,timeMatrix){
                for(var i=0; i<visitData.length;i++){
                    var Matrix=timeMatrix[i];
                    var visit=visitData[i];
                    console.log(visit);
                    for(var j=0;j<visit.size;j++){
                        console.log(visit.records[j]);
                        for(var a=0; a<accountLocation[i].length; a++){
                            var samelocation=[];
                            if(visit.records[j].STKR__Days_Overdue__c!=visit.records[accountLocation[i][a]].STKR__Account_1kp__r.Id){
                                console.log(visit.records[j].Id);
                            }
                        }
                    }
                }
                
            }
            
            function arrayMin(arrs,index){
                var min=Math.min(...arrs);
                if(!min){
                    index=arrs.indexOf(0);
                    arrs[index]=999999;
                    min=Math.min(...arrs);
                    index=arrs.indexOf(min);
                    return min;
                }else{
                    index=arrs.indexOf(min);
                    return min;
                }
            }
            
            function fixlocationIndex(matrix){
                
                var indexarr=[];
                var x=matrix.length;
                var newarry=matrix[x-1].slice();
                newarry.sort(function (a,b){return a-b;});
                for(var i=0; i<matrix[x-1].length;i++){
                    if(i){
                        var element=newarry[i];
                        var index=matrix[x-1].indexOf(element);
                        indexarr.push(index);            
                    }
                }
                return indexarr;
            }
            //send your resource location with different location to Mapquest
            
            
            //timeMatrix and resourceData and visitData is array for different territory
            function groupLocation(visit){
                
                var sameLocation={};
                for(var i=0;i<visit.size;i++){
                    var location=visit.records[i].STKR__Account_lkp__r.Id;
                    if(!sameLocation[location]){
                        sameLocation[location]=[];
                    }
                    sameLocation[location].push(i);
                }
                return sameLocation
            }
            
            function seperatevisit(visit){
                var geolocation={};
                
                for(var i=0;i<visit.size;i++){
                    var latitude=visit.records[i].STKR__Account_lkp__r.STKR__location__Latitude__s;
                    var location=visit.records[i].STKR__Account_lkp__r.Id;
                    var longitude=visit.records[i].STKR__Account_lkp__r.STKR__location__Longitude__s ;
                    
                    if(!geolocation[location]){
                        geolocation[location]=[];
                    }
                    geolocation[location]=[latitude,longitude];
                }
                return geolocation;
            }
            
            function seperateFixVisit(visit){
                var seperateFixVisit={};
                for(var i=0; i<visit.size;i++){
                    var fixvist=visit.records[i].STKR__Fixed_Visit__c;
                    if(fixvist=="true"){
                        seperateFixVisit[i]=[visit.records[i].STKR__Due_Date__c.slice(0,-1),visit.records[i].STKR__Due_Finish__c.slice(0,-1),visit.records[i].STKR__Service__r.STKR__Time_Allocation__c];
                    }
                }
                return seperateFixVisit;
            }
            
            function fixvisitDays(rawdata,resource,fixvisit,days,sortlocation,week){
                console.log("fixvisitdays");
                console.log(fixvisit);
                console.log(days);
                console.log(sortlocation);
                console.log(week);
                console.log(rawdata);
                
                console.log(resource);
                
                var fromday=new Date(rawdata[0].value);
                
                var result={};
                
                //deal with fixvist
                if(days>getvisitNumber(sortlocation)){
                    alert("sorry your visit is less, can not route optimisation");
                }else{
                    for(var j=1;j<days;j++){
                        week[j]=addDays(fromday,j);
                        var temsplit=resource.starttime.split(":");
                        week[j].setHours(temsplit[0],temsplit[1]);
                        console.log(week[j]);
                        var number=1;
                        for(var i in fixvisit){
                            //start time
                            var tem=new Date(fixvisit[i][0]);
                            
                            if(tem.getMonth()==week[j].getMonth() && tem.getDate()==week[j].getDate()){
                                var temtime = ((tem.getMinutes()<10) ? ":0" : ":")+tem.getMinutes();
                                //[number day, fixvisit index, time]
                                result[j+','+tem.getHours()+temtime+','+(number++)+','+i]=[];
                            }else{
                                result[j+','+resource.starttime]=[];
                                //
                            }
                        }  
                    }
                }                
                console.log("check my result");
                console.log(result);
                return result;
                
            }
            
            
            function isEmpty(obj) {
                for(var key in obj) {
                    if(obj.hasOwnProperty(key))
                        return false;
                }
                return true;
            }
            
            function locationToVisit(index,locationId,sameList){
                var locationsort={};
                for(var i=0;i<index.length;i++){
                    var location=locationId[index[i]];
                    if(!locationsort[location]){
                        locationsort[location]=[];
                    }
                    locationsort[location].push(sameList[locationId[index[i]]]);
                }
                
                return locationsort;
            }
            
            function getvisitNumber(sortlocation){
                var visitnumber=0;
                for(a in sortlocation){
                    visitnumber=visitnumber+sortlocation[a][0].length;
                }
                return visitnumber;
            }
            
            //calculate the day+day
            function addDays(date, days) {
                var result = new Date(date);
                result.setDate(result.getDate() + days);
                
                return result;
            }
            
            function generateDay(rawdata,days,sortlocation,week,resource){
                var fromday=new Date(rawdata[0].value);
                
                var result={};
                
                if(days>getvisitNumber(sortlocation)){
                    alert("sorry your visit is less, can not route optimisation");
                }else{
                    for(var j=1;j<=days;j++){
                        result[j+','+resource.starttime]=[];
                        week[j]=addDays(fromday,j);
                    }
                }
                return result;
            }
            
            function generateresource(resource){
                
                var result={};
                result.id=resource.records.Id;
                result.name=resource.records.Name;
                result.starttime=resource.records.STKR__StartOfDay__c;
                result.endtime=resource.records.STKR__EndOfDay__c;
                result.workhour=resource.records.STKR__Working_Hours__c*60;
                result.lunch=resource.records.STKR__Lunch_Break_Minutes__c*60;
                result.workday=resource.records.WorkingDay__c;
                return result;
                
            }
            
            function optimisation(arguments,resourGroup,rawData,sameList,sameLocationId,fixVisit,resourceData,visitData,resourceNum,dayfixvistGroup){ 
                
                console.log("this is my fixvisit"+fixVisit);
                console.log(fixVisit);
                var days = Math.round(Math.abs((new Date(rawData[1].value).getTime()-new Date(rawData[0].value).getTime())/(24*60*60*1000)));
                var output={};
                console.log(resourGroup)
                for(var i=0;i<resourGroup.length;i++){
                    if(arguments[i][0].time==null){
                        alert("Please check your visit, we can not find location");
                    }
                    
                    //var matrixfix=arguments[i][0].time[arguments[i][0].length-1];
                    var index=fixlocationIndex(arguments[i][0].time);
                    console.log(index);
                    var sortlocation=locationToVisit(index,sameLocationId[i],sameList[i]);
                    console.log(sortlocation);
                    var week={};
                    var result;
                    var resource=generateresource(resourceData[i]);
                    var workingTime={};
                    var dayfixvist={};
                    
                    if(isEmpty(fixVisit[i])){
                        result=generateDay(rawData,days,sortlocation,week,resource);
                    }else{
                        console.log("this is fixvisit");
                        result=fixvisitDays(rawData,resource,fixVisit[i],days,sortlocation,week);
                        console.log(result);
                        dayfixvist=samedayFixvisit(result);
                        console.log('thisi si dayfixvist'+JSON.stringify(dayfixvist));
                        console.log('this is it is my fixitis'+JSON.stringify(result));                        
                    }
                    
                    var resource=changeWorkday(resource);
                    console.log('change'+resource);
                    var result=deletebyWeek(week,resource,result);
                    var totaltime=Object.assign({},result);
                    
                    for(var key in totaltime){
                    	totaltime[key]=0;
                    }
                    var optimisationList=moveVisit(arguments[i][0].time,sameLocationId[i],sameList[i],visitData[i],sortlocation,result,resource,week,workingTime,dayfixvist,fixVisit[i],rawData[0],totaltime);
                    console.log("this is my result haha");
                    console.log(result);
                    resourceNum[i]=resource.id;
                    output[resource.id]=optimisationList;
                    dayfixvistGroup[i]=dayfixvist;
                }
                
                console.log(output);
                return output;
            }
            
            
            function isInteger(obj){
                return typeof obj === 'number' && obj%1 === 0;                
            }
            
            //find the key index based on even number or odd number
            function keyIndex(resulti){
                if(resulti.length % 2==0){
                    return resulti.length/2;
                }else{
                    return Math.floor(resulti.length/2);
                }
            }
            
            function samedayFixvisit(result){
                var temObject={};
                for(var key in result){
                    var tem=key.split(',');
                    if(tem.length!=2){
                        if(!temObject[tem[0]]){
                            temObject[tem[0]]=[];
                        }
                        temObject[tem[0]].push(tem[3]);
                        //temObject[tem[0]].push(tem[0]+','+tem[1]+','+tem[2]+','+tem[3]);
                        
                    }else{
                    }
                }
                return temObject;
            }
            // change the 
            function changeWorkday(resource){
                console.log('changeWorkdat');
                var day=resource.workday.split(';');
                for(var i=0;i<day.length;i++){
                    if(day[i]==='Monday'){
                        day[i]=1;
                    }else if(day[i]==='Tuesday'){
                        day[i]=2
                    }else if(day[i]==='Wednesday'){
                        day[i]=3
                    }else if(day[i]==='Thursday'){
                        day[i]=4
                    }else if(day[i]==='Friday'){
                        day[i]=5
                    }else if(day[i]==='Saturday'){
                        day[i]=6
                    }else if(day[i]==='Sunday'){
                        day[i]=7
                    }
                }
                resource.workday=day.toString();
                return resource;
            }
            // delete result because resources cannot work on weekend or other days
            // return newly result
            function deletebyWeek(week,resource,result){                
                var day=resource.workday.split(',').map(Number);
                for(var i in result){
                    var tema=i.split(',');
                    var weekday=week[Number(tema[0])].getDay();
                    if (day.indexOf(weekday) === -1){
                        delete result[i];
                    }
                }                
                return result;
                
            }
            
            //move visit function
            /*
            separate by two different way to insert. 
            Firstly, insert the empty result(array).
            Secondly, insert the result(array), which already had two elements. For example, result : [12,9]. numbers means visit index
            However, fixvisit not truly insert into result(array), considering about fixvisit as fixlocation.
            */
            function moveVisit(matrix,locationId,sameLocation,visit,sortlocation,result,resource,week,workingTime,dayfixvist,fixvisit,rawData,totaltime){
                console.log('this is my moveVisit function');
                console.log(week);
                console.log(workingTime);
                console.log(locationId);
                console.log(sameLocation);
                console.log(sortlocation);
                var visitarr=[];
                console.log(result);
                console.log(visit);
                console.log("this is matrix");
                var newArray = matrix.map(function(arr) {
                    return arr.slice();
                });
                
                console.log(matrix);
                
                // newarray still copy the original time matrix
                console.log(newArray);
                
                var visitCopy=visit.records.slice();
                //sortlocation to one dementional array
                
                for(var a in sortlocation){
                    for(var b=0;b<sortlocation[a][0].length;b++){
                        visitarr.push(sortlocation[a][0][b]);
                        
                    }
                }
                
                // sort the same day for fixvisit in result
                var fixvisitresult={};
                for(var i in result){
                    var tema=i.split(',');
                    // if it is fixvisit array.
                    if(tema.length==2){
                        
                    }else{
                        if(fixvisitresult[tema[0]]==null){
                            fixvisitresult[tema[0]]=[]
                        }
                        fixvisitresult[tema[0]].push([tema[1],tema[2]]);
                        console.log("this is fucking fixvisit");
                    }
                }
                
                console.log('this is fixvisit result'+JSON.stringify(fixvisitresult));
                
                var control=1;
                var inputvisit=[];
                var temarr=matrix[matrix.length-1].slice();
                
                temarr=temarr.sort(function (a,b){return a-b;});
                console.log(temarr);
                console.log(matrix);
                var flag;
                for(var b=0;b<2;b++){
                    flag=1;
                    for(var a in result){
                        var tema=a.split(',');
                        //otherwise no fixvisit in this day
                        console.log("cannot find");
                        console.log(a);
                        for(var i=1;i<temarr.length;i++){
                            control=false;
                            //find visit in same location based on matrix time
                            var visitarry=sameLocation[locationId[matrix[matrix.length-1].indexOf(temarr[i])]];
                            console.log(temarr[i]);
                            console.log('timemanagement');
                            for(var j=0;j<visitarry.length;j++){
                                if(checkmove(result,result[a],visitarry[j],visit,inputvisit,resource,tema,temarr[i],totaltime[a],dayfixvist,false)){
                                    // if it is fixlocation in object result
                                    if(checkfixlocation(result,fixvisitresult,tema,a,dayfixvist)){
                                        
                                        result[a].splice(flag,0,visitarry[j]);
                                        totaltime[a]+=Number(temarr[i]);
                                        console.log(JSON.stringify(totaltime));
                                        inputvisit.push(visitarry[j]);
                                        visitCopy.splice(visitCopy.indexOf(visitarry[j]),1);
                                    }else{
                                        //find specific day for 
                                        console.log("it is fixvisit not fixlocation");
                                        moveFixvisit(tema,dayfixvist,a,newArray,locationId,sameLocation,visit,inputvisit,result,fixvisitresult,b,visitarry[j],inputvisit,visitCopy,totaltime,resource,temarr[i]);
                                        // based on fixvisit location, find the shortest location push into result
                                    }
                                    control=true;
                                    console.log(JSON.stringify(result))
                                    break;
                                    
                                }
                            }
                            if(control==true){
                                break;
                            }
                        }
                        
                    }
                    flag=-1;                   
                }
                console.log("find the result"+JSON.stringify(result));
                console.log(visitCopy);
                var numberVisit;
                var nummatrix=matrix.length-1;
                console.log(matrix.length);
                matrix.splice(nummatrix,1);
                for(var i=0;i<matrix.length;i++){
                    matrix[i].splice(nummatrix,1);
                }
                
                do{
                    var oddGiven=true;
                    var increase=0;
                    
                    numberVisit=visitCopy.length;
                    for(var a in result){
                        
                        var tema=a.split(',');
                        var visitkey=result[a][keyIndex(result[a])];
                        var targetmatrix=matrix[getKeyByValue(locationId,getKeyByValue(sameLocation,visitkey))];
                        var temarr=targetmatrix.slice();
                        temarr=temarr.sort(function (a,b){return a-b;});
                        for(var i=1;i<temarr.length;i++){
                            control=false;
                            var visitarry=sameLocation[locationId[targetmatrix.indexOf(temarr[i])]];
                            //console.log(visitarry);
                            for(var j=0;j<visitarry.length;j++){
                                if(checkmove(result,result[a],visitarry[j],visit,inputvisit,resource,tema,temarr[i],totaltime[a],dayfixvist,false)){
                                    result[a].splice(keyIndex(result[a]),0,visitarry[j]);
                                    control=true;
                                    inputvisit.push(visitarry[j]);
                                    visitCopy.splice(visitCopy.indexOf(visitarry[j]),1);
                                    totaltime[a]+=Number(temarr[i]);

                                        console.log(JSON.stringify(totaltime));

                                    break;
                                }
                            }
                            
                            
                        }
                        
                        
                        if(numberVisit==visitCopy.length){
                            break;
                        }
                    }
                }while(visitCopy>0);
                
                
                
                
                console.log(visitCopy);
                
                return result;
            }
            
            /*
            move fixvisit,which run in moveVisit function due to special situation
            two different situation.
            
            the result gave the result .
            situation 1:	separate the fixvisit and normal visit
            situation 2: 
            
            For example: 1------- key: "1,8:00",value: [some visit index]
            					  key: '1,12:00,32,1', value:[some visit index]
                                  key: '2,8:00', value:[some visit index]
                                  in this situation, '1,8:00' have half fixlocation and half fixvisit(32)
                                  '1,12:00,32,1' have half fixvisit(32) and half fixlocation
                                  
                         2------- key: '1,8:00', value:[some visit index]
                         		  key: '1,12:00,32', value:[some visit index]
                                  key: '1,16:00,56', value:[some visit index]
                                  key: '2,8:00', value:[some visit index]
                                  in this situation, '1,8:00' have half fixlocation and half fixvisit(32)
                                  '1,12:00,32,1' have half fixvisit(32) and half fixvisit(56)
                                  '1,16:00,56,2' have half fixvisit(56) and half fixlocation
                                  
            
            */
            function moveFixvisit(tema,dayfixvist,a,matrix,locationId,sameLocation,visit,inputvisit,result,fixvisitresult,b,visitarryfixlocation,inputvisit,visitCopy,totaltime,resource,distance){
                console.log('casduirhsdfsfdoidvjnfd');
                console.log(dayfixvist);
                console.log(visitarryfixlocation);
                if(tema.length===2){
                    if(b===0){
                        console.log('it is frist time'+ tema);
                        result[a].splice(0,0,visitarryfixlocation);
                        inputvisit.push(visitarryfixlocation);
                        visitCopy.splice(visitCopy.indexOf(visitarryfixlocation),1);
                        totaltime[a]+=Number(distance);
                        console.log(JSON.stringify(totaltime));

                        return 0;
                    }else{
                        console.log('it is second time for insert vissit'+tema);
                        var targetmatrix=matrix[getKeyByValue(locationId,getKeyByValue(sameLocation,Number(dayfixvist[tema[0]][0])))];
                        var temarr=targetmatrix.slice();
                        temarr=temarr.sort(function (a,b){return a-b;});
                        for(var i=1;i<temarr.length;i++){
                            var visitarry=sameLocation[locationId[targetmatrix.indexOf(temarr[i])]];
                            if(typeof visitarry == 'undefined'){
                                continue;	
                            }                            
                            for(var j=0;j<visitarry.length;j++){
                                if(checkmove(result,result[a],visitarry[j],visit,inputvisit,resource,tema,temarr[i],totaltime[a],dayfixvist,false)){
                                    result[a].splice(-1,0,visitarry[j]);
                                    inputvisit.push(visitarry[j]);
                                    visitCopy.splice(visitCopy.indexOf(visitarry[j]),1);
                                    totaltime[a]+=Number(temarr[i]);
                                    console.log(JSON.stringify(totaltime));

                                    return 0;
                                }
                            }
                        }
                    }
                }
                else{
                    var length=dayfixvist[tema[0]].length;
                    if(b===0){
                        console.log('it is frist time'+ tema);
                        var targetmatrix=matrix[getKeyByValue(locationId,getKeyByValue(sameLocation,Number(dayfixvist[tema[0]][0])))];
                        console.log('shithappend');
                        console.log(targetmatrix);
                        var temarr=targetmatrix.slice();
                        
                        temarr=temarr.sort(function (a,b){return a-b;});
                        for(var i=1;i<temarr.length;i++){
                            var visitarry=sameLocation[locationId[targetmatrix.indexOf(temarr[i])]];
                            console.log(visitarry);
                            if(typeof visitarry == 'undefined'){
                                continue;	
                            } 
                            console.log(temarr[i]);
                            for(var j=0;j<visitarry.length;j++){
                                if(checkmove(result,result[a],visitarry[j],visit,inputvisit,resource,tema,temarr[i],totaltime[a],dayfixvist,true)){
                                    result[a].splice(0,0,visitarry[j]);
                                    inputvisit.push(visitarry[j]);
                                    visitCopy.splice(visitCopy.indexOf(visitarry[j]),1);
                                    totaltime[a]+=Number(temarr[i]);
                                        console.log(JSON.stringify(totaltime));

                                    return 0;
                                }
                            }
                        }
                    }else{
                        console.log('it is second time for insert vissit'+tema);
                        if(dayfixvist[tema[0]].indexOf(tema[3])===dayfixvist[tema[0]].length-1){
                            result[a].splice(-1,0,visitarryfixlocation);
                            inputvisit.push(visitarryfixlocation);
                            visitCopy.splice(visitCopy.indexOf(visitarryfixlocation),1);
                            totaltime[a]+=Number(distance);
                            console.log(JSON.stringify(totaltime));
                            return 0;
                            
                        }else{
                            var targetmatrix=matrix[getKeyByValue(locationId,getKeyByValue(sameLocation,Number(dayfixvist[tema[0]][dayfixvist[tema[0]].indexOf(tema[3])+1])))];
                            
                            var temarr=targetmatrix.slice();
                            temarr=temarr.sort(function (a,b){return a-b;});
                            for(var i=1;i<temarr.length;i++){
                                var visitarry=sameLocation[locationId[targetmatrix.indexOf(temarr[i])]];
                                if(typeof visitarry == 'undefined'){
                                    continue;	
                                }                            
                                
                                for(var j=0;j<visitarry.length;j++){
                                    if(checkmove(result,result[a],visitarry[j],visit,inputvisit,resource,tema,temarr[i],totaltime[a],dayfixvist,true)){
                                        result[a].splice(-1,0,visitarry[j]);
                                        inputvisit.push(visitarry[j]);
                                        visitCopy.splice(visitCopy.indexOf(visitarry[j]),1);
                                        totaltime[a]+= Number(temarr[i]);
                                        console.log(JSON.stringify(totaltime));

                                        return 0;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            // check wether it is fixvisit, because the two situation which I mentioned
            function checkfixlocation(result,fixvisitresult,tema,a,dayfixvist){
                if(Object.keys(fixvisitresult).length === 0 && fixvisitresult.constructor===Object){                    
                    return true;
                }else{
                    if(Object.keys(fixvisitresult).indexOf(tema[0])!= -1){
                        console.log('it is in this arry'+ tema[0]);
                        console.log(tema);
                        return false;
                    }else{
                        return true;
                    }
                    
                }
            }
            
            function getTimeMatrix(result,matrix,visit){
                for(var i in result){
                    result[i]
                }
            }
            
            // get time different, calculating the hours and min bewteen two different time
            function diff(start, end) {
                start = start.split(":");
                end = end.split(":");
                var startDate = new Date(0, 0, 0, start[0], start[1], 0);
                var endDate = new Date(0, 0, 0, end[0], end[1], 0);
                var diff = endDate.getTime() - startDate.getTime();
                return diff/1000;
            }
            
            
            // function for check if it can be moved
            /*
            mentainable function
            1. time management, check the time, which means there is limited time for resources in each day.
            
            For example: 1------- key: "1,8:00",value: [some visit index]
            					  key: '1,12:00,32,1', value:[some visit index]
                                  key: '2,8:00', value:[some visit index] 
            					  "1,8:00" have time from resource.starttiem(8:00) to fixvisit time(12:00)
                                  '1,12:00,32,1' have time from fixvisit duetime(12:00) to resource.endtime(17:00)
						  2------- similar with I mentioned before.
			2. frenquency: Weekly, Daily visit has been considered.
            */
            function checkmove(result,checkvisit,visitarr,visit,inputvisit,resource,tema,temarr,totaltime,dayfixvist,fixvisit){
                var date1=resource.starttime;
                var date2=resource.endtime;
                
                if(!inputvisit.length){
                    return true;
                }
                /// IMPORTANT
                // time management
                if(!dayfixvist && Object.keys(dayfixvist).indexOf(tema[0])!=-1){
                    if(dayfixvist[tema[0]].indexOf(tema[3])===dayfixvist[tema[0]].length-1){
                        console.log('last fixvisit');
                        var different=diff(new Date(visit.records[tema[3]].STKR__Due_Date__c).getHours()+':'+new Date(visit.records[tema[3]].STKR__Due_Date__c).getMinutes(),resource.endtime);
                        if(checkvisit.length != 0){
                            var total=0;
                            for(var i=0; i<checkvisit.length; i++){

                                total += 2*Number(temarr)+Number(visit.records[checkvisit[i]].STKR__Service__r.STKR__Time_Allocation__c)*60;
                            }
                            total += Number(resource.lunch)
                            console.log(total+'+'+totaltime)
                            console.log(different)

                            if(total+totaltime>different){
                                return false;
                            }
                        }
                    }else if(tema.length != 2){
                        console.log('no last fixvisit');
                        var different=diff(new Date(visit.records[tema[3]].STKR__Due_Date__c).getHours()+':'+new Date(visit.records[tema[3]].STKR__Due_Date__c).getMinutes(),new Date(visit.records[dayfixvist[tema[0]][dayfixvist[tema[0]].indexOf(tema[3])+1]].STKR__Due_Date__c).getHours()+':'+new Date(visit.records[dayfixvist[tema[0]][dayfixvist[tema[0]].indexOf(tema[3])+1]].STKR__Due_Date__c).getMinutes());

                        if(checkvisit.length != 0){
                            var total=0;
                            for(var i=0; i<checkvisit.length; i++){
                                total += 2*Number(temarr)+Number(visit.records[checkvisit[i]].STKR__Service__r.STKR__Time_Allocation__c)*60;
                            }
                            total += Number(resource.lunch)
                            if(total+totaltime>different){
                                return false;
                            }

                    }
                        }else{
                            var different=diff(resource.starttime,new Date(visit.records[tema[3]].STKR__Due_Date__c).getHours()+':'+new Date(visit.records[tema[3]].STKR__Due_Date__c).getMinutes());
                            if(checkvisit.length != 0){
                                var total=0;
                                for(var i=0; i<checkvisit.length; i++){
                                    total += 2*Number(temarr)+Number(visit.records[checkvisit[i]].STKR__Service__r.STKR__Time_Allocation__c)*60;
                                }
                                total += Number(resource.lunch)
                                if(total+totaltime>different){
                                    return false;
                                }

                        
                        }
                            }
                    //in fixvisit, we need consider about the different time
                }else{
                    console.log('no fixvisit');
                    var different=diff(resource.starttime,resource.endtime);
                    if(checkvisit.length != 0){
                        var total=0;
                        for(var i=0; i<checkvisit.length; i++){
                            console.log('timeforgoandcollect');
                        	total += Number(temarr)+Number(visit.records[checkvisit[i]].STKR__Service__r.STKR__Time_Allocation__c)*60;
                        }
                        total += Number(resource.lunch)

                        if(total+totaltime>different){
                        return false;
                        }
                    }
                    
                    
                }
                //IMPORTANT time management
                //weekly visit limit (next week,next next week)
                if (visit.records[visitarr].STKR__Service__r.STKR__Frequency__c=="Weekly"){
                    for(var i=0;i<inputvisit.length;i++){
                        //console.log("check the Id is same first:"+visit.records[inputvisit[i]].STKR__Service__r.Id);
                        //console.log("check the 2 Id: "+visit.records[visitarr].STKR__Service__r.Id);
                        if (visit.records[inputvisit[i]].STKR__Service__r.Id==visit.records[visitarr].STKR__Service__r.Id){
                            //console.log(result);
                            //console.log(visitarr);
                            //console.log(inputvisit[i]);
                            var key1=getKeyByValue(result,inputvisit[i]);
                            var key2=getKeyByValue(result,inputvisit[inputvisit.length-2]);
                            key2=key2+1;
                            var tem=Math.round(7/visit.records[visitarr].STKR__Service__r.STKR__Service_Interval__c);
                            if(Math.abs(key2-key1)<tem || Math.abs(key2-key1)>tem*2){
                                return false;
                            }
                        }
                    }
                }
                
                if(inputvisit.indexOf(visitarr)!=-1){
                    return false;
                }
                //daily  not allow same schedual in same day
                if(visit.records[visitarr].STKR__Service__r.STKR__Frequency__c=="Daily"){
                    if(!checkvisit.length){
                        return true;
                    }
                    for(var i=0; i<checkvisit.length;i++){
                        if (visit.records[checkvisit[i]].STKR__Service__r.Id==visit.records[visitarr].STKR__Service__r.Id){
                            return false;
                        }
                    }
                }  
                
                
                
                return true;
            }
            
            
            // utility function
            function getKeyByValue(object, value) {
                for(var key in object){
                    if(object[key].indexOf(value)!=-1){
                        return key;
                    }
                }
            }
            
            /*
            this function is for get value for rawdata. we get data from user's input, processing data function
            input ： rawdata --form data from users'input
            output: get resource
            */
            
            function valueForm (rawdata){
                var resource=[];
                for (i=0;i<rawdata.length;i++){
                    if (rawdata[i].name=="resource"){
                        resource.push("'"+rawdata[i].value+"'");
                    }
                }
                return resource;
            }
            /*
            send request from getting resource
            input: rawdata --form data from users'input
            output: result for resource request
            */
            function requestResource(rawdata){
                var result=[];
                var resource=valueForm(rawdata);
                for(var i in resource){
                    var query="select Id,Name,WorkingDay__c,STKR__StartOfDay__c,STKR__Lunch_Break_Minutes__c, STKR__Expiry_Date__c, STKR__EndOfDay__c, STKR__Working_Hours__c,STKR__Fixed_Location__longitude__s,STKR__Fixed_Location__latitude__s from STKR__Resource__c where Id in ("+resource[i]+")";
                    try{
                        sforce.connection.sessionId="{!$Api.Session_ID}";
                        var queryResult=sforce.connection.query(query);
                        result.push(queryResult);
                    }catch(error)
                    {
                        console.log(error);
                    }
                }
                return result;
            }
            /*send request for getting visit data
            input: rawdata --form data from users'input
            output: result for visit data
            */
            //input: the raw data output: filter data using Query
            function requestToSforce(data){
                var resource=valueForm(data);
                // query to find the lantitude and longtitude
                //best way is use one request get multiple resources and territories.
                var result=[];
                for(var i in resource){
                    var query="SELECT Id,Name,STKR__Site_Post_Code__c,STKR__Service__r.STKR__Service_Interval__c,STKR__Days_Overdue__c,STKR__Account_lkp__r.Id,STKR__Service__r.Id,STKR__Fixed_Visit__c, STKR__Service__r.STKR__Last_Scheduled_Visit__c,STKR__Service__r.STKR__Frequency__c, STKR__Service__r.STKR__Contract_End_Date__c,STKR__Service__r.STKR__Fix_all_Visits__c, STKR__Due_Date__c, STKR__Due_Finish__c, STKR__Service__r.STKR__Time_Allocation__c, STKR__Service__r.STKR__Service_Owner__c, STKR__Account_lkp__r.STKR__Location__longitude__s, STKR__Account_lkp__r.STKR__Location__latitude__s from STKR__Visit__c where STKR__Service__r.STKR__Service_Owner__c in ("+resource[i]+") and STKR__Planned_Date__c< "+data[1].value+"T00:00:00.000+0000 and STKR__Planned_Date__c> "+data[0].value+"T00:00:00.000+0000";
                    try{
                        sforce.connection.sessionId="{!$Api.Session_ID}";
                        var queryResult=sforce.connection.query(query);
                        result.push(queryResult);
                    }catch(error)
                    {
                        console.log(error);
                    }
                }
                return result;
            }
            
            /*
            generate Json for sending request to mapquest
            input: 
            output:  Json file
            */
            function generateMapJson(result,sameLocationId){
                var mappingJsonList=[];
                var mappingJson={};
                var locations=[];
                mappingJson.locations=locations;
                var accountLocationtem=[];
                values=Object.keys(result).map(key => result[key]);
                keysSorted=Object.keys(result);
                sameLocationId.push(keysSorted);
                for(var i=0;i<values.length;i++){
                    var latLng=Number(values[i][0])+","+Number(values[i][1]);
                    mappingJson.locations.push(latLng);
                }
                mappingJson.options={};
                mappingJson.options={"allToAll":true};
                return JSON.stringify(mappingJson);
            }
            
            </script>
            
        </head>
        <body>

                

            <apex:pageBlock title="Route Optimisation" >
                
                <form id="matrixForm">
                    <div id="date_container">
                        
                        <div>
                            <label>From Date </label>
                            <input type="date" id="fromDate" name="formDate"/>    
                        </div>
                        <div style='width: 30%;'></div>
                        
                        <div style='float:left;'>
                            <label>To Date</label>
                            <input type="date" id="toDate" name="toDate"/>    
                        </div>
                    </div>
                    
                    
                    <div id="resource">
                        
                    </div>
                    
                    
                    <div id="territory">
                        
                    </div>
                    <div>
                        <input type="submit" onclick="submit;" value="Route Optimisation"/>
                    </div>
                    
                    
                </form>
                <hr />
                <div class="body" id="result">
                    <div class="header" id="information">
                    </div>
            <div id="kang">                    
                    <div class="container">
                        
                        <div id="dayresult" class="left">
                            
                        </div>
                        <div class="right"><div id="visitorder"></div><div id="result"><p>Time:<strong id="resultTime"></strong> </p><p>Cost:<strong id="resultCost"></strong> </p><p>Distance:<strong id="resultDistance"></strong> </p><p>Capability: <strong id="resultCapability"></strong></p></div></div>
                        <div class="main">
                            <div id="map" style="width: 100%;height:100%;"></div>
                        </div>
                    </div>
                                </div>
                    <div class="footer"></div>
                </div>
            </apex:pageBlock>
                

        </body>
    </html>
</apex:page>