<apex:page controller="MapControllertest" showHeader="true" sidebar="false">
    <html>
        <head>    
            <title>Route Optimisation</title>
            <script src="./../soap/ajax/43.0/connection.js" type="text/javascript"></script>
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
            <script src="https://api.mqcdn.com/sdk/mapquest-js/v1.3.1/mapquest.js"></script>
            <link rel="stylesheet" href="https://api.mqcdn.com/sdk/mapquest-js/v1.3.1/mapquest.css"/>
                <style>
                #date_container{
            display: flex;
            justify-content: center;
            }
            
            
            
            </style>
            
            
            <script type="text/javascript">
                //distribute the Monday-Starday
                var resources = [];
            var territories = [];
            window.onload = function() {
                //optimizedwaypoints example can be used
                //https://developer.mapquest.com/documentation/mapquest-js/v1.3/examples/directions-with-optimized-waypoints/
                L.mapquest.key = 'iJHqMi80cdsL6r70ePqDTYXHeSoNjx2Y';
                
                var map = L.mapquest.map('map', {
                    center: [40.7128, -74.0059],
                    layers: L.mapquest.tileLayer('map'),
                    zoom: 13
                });
                map.addControl(L.mapquest.control());
                L.mapquest.directions().route({
                    start: '350 5th Ave, New York, NY 10118',
                    end: 'One Liberty Plaza, New York, NY 10006'
                });
                
                //generate the HTML and add name
                
                <apex:repeat value="{!objectResource}" var="resource" id="resources">
                    var pResource=document.createElement("label");
                var node=document.createTextNode('{!resource.name}');
                var element=document.getElementById("resource");
                pResource.appendChild(node);
                element.appendChild(pResource);
                var checkboxResource=document.createElement("input");
                checkboxResource.name="resource";
                checkboxResource.value='{!resource.Id}';
                checkboxResource.setAttribute('type', 'checkbox');
                element.appendChild(checkboxResource);
                
                
                var resource ={
                    name: '{!resource.name}',
                };
                resources.push(resource);
                
                </apex:repeat>
                // console.log(resources);
                //console.log(resources.length);
                
                <apex:repeat value="{!objectTerritory}" var="territory" id="territories">
                    var pResource=document.createElement("label");
                var node=document.createTextNode('{!territory.name}');
                var element=document.getElementById("territory");
                pResource.appendChild(node);
                element.appendChild(pResource);
                var checkboxResource=document.createElement("input");
                checkboxResource.setAttribute('type', 'checkbox');
                checkboxResource.name="territory";
                checkboxResource.value='{!territory.Id}';
                element.appendChild(checkboxResource);
                
                var territory ={
                    name: '{!territory.name}'
                };
                
                territories.push(territory);
                
                </apex:repeat>
            }
            
            
            
            
            $(document).ready(function(){
                //js json Ajax
                $("#matrixForm").submit(function(event){
                    //getting data from the Form.
                    var rawData=$("#matrixForm").serializeArray();
                    console.log(rawData);
                    //prevent send request
                    event.preventDefault();
                    var territory=[];
                    var resource=[];
                    var visitData=requestToSforce(rawData);
                    console.log(visitData);
                    var resourceData=requestResource(rawData);
                    var generatejson=generateMapJson(visitData);
                    console.log(generatejson);
                    var timeMatrix=getTravelTime(generatejson,resourceData,visitData,rawData);
                    
                    //var mappingJson=JSON.stringify({locations,options:allToAll});
                });
                
            });
            
            //input : return data by POST. output : show the map
            function renderMap(data){
                
            }
            // find the locations >= 25, need cluster location
            //it is one of clever way to deal with limitations problems(optimized route with more than 25 stops)
            function culsterlocation(mappingJson){
                if (mappingJson.locations.length<=24){
                    return 0;
                }else if(mappingJson.locations.length<=99){
                    return mutipleRequest(mappingJson);
                }else{
                    console.log("the location is too much");
                }
            }
            
            // it is a stupid way to deal with problem.obtain the full distance matrix through the different request.
            function mutipleRequest(mappingJson){
                var temMappingJson={};
                temMappingJson.locations=locations;
                for(i=0;i<mappingJson.locations.length/25+1;i++){
                    //splite data for different requests
                    for(j=0;j<mappingJson.locations.length; j++){
                        temMappingJson.locations.push(mappingJson.locations[j+i*25]);
                    }
                    getTravelTime(temMappingJson)
                }
            }
            // generate the Json file
            //input :specific date and resource, territory output: the location 
            function getLocation(data){
                
            }
            
            //input: data from the mapquest response. output: the time and distance
            function getTravelTime(mappingJson,resourceData,visitData,rawData){
                $.ajax({
                    type: 'POST',
                    dataType: 'jsonp',
                    contentType: 'json',
                    url: "http://www.mapquestapi.com/directions/v2/routematrix",
                    data: {key: decodeURI("iJHqMi80cdsL6r70ePqDTYXHeSoNjx2Y"),
                           json: mappingJson},
                    
                    success: function(data){
                        console.log(data);
                        console.log('form was submit,' + data.time);
                        //calculate the optimisation
                        optimisation(data,resourceData,visitData,rawData);
                    },
                    error: function(data){
                        console.log("error");
                    },
                });
                
            }
            function optimisation(timeMatrix, resourceData,visitData,rawData){
                //var lastVisied=visitData.records[i].STKR__Last_Visit__c;
                //  if (lastVisied){
                
                //}else{
                
                //}
                //seperate the visitData to resourceData, which means seperate schedule to individuals.
                var resourceNum=[];
                var days = Math.round(Math.abs((new Date(rawData[1].value).getTime()-new Date(rawData[0].value).getTime())/(24*60*60*1000)));
                
                for(j=0;j<resourceData.size;j++){
                    var jobSeperated=[];
                    for(i=0; i<visitData.size;i++){
                        if (visitData.records[i].STKR__Service__r.STKR__Service_Owner__c==resourceData.records[j].Id)
                        {
                            jobSeperated.push(i);
                        }
                    }
                    resourceNum.push(jobSeperated);
                }
                console.log(resourceNum);
                
                var NOverdueNFix=[];
                var NOverdueFix=[];
                //seperated job
                for(j=0;j<resourceNum.length;j++){
                    var notOverdueNotFixVisit=[];
                    var notOverdueFixVisit=[];
                    for(var i in resourceNum[j]){
                        if(visitData.records[resourceNum[j][i]].STKR__Fixed_Visit__c=="true"){
                            //it is fix visit and not overdue visit.
                            var days=Math.round(Math.abs((new Date(visitData.records[resourceNum[j][i]].STKR__Due_Date__c).getTime()-new Date(rawData[0].value).getTime())/(24*60*60*1000)));
                            notOverdueFixVisit.push([days,resourceNum[j][i]]);
                            //console.log("it is fix visit and not overdue visit");
                        }else{
                            //it is not fix visit and not overdue visit
                            //console.log("it is not fix visit and not overdue visit");
                            var days=Math.round(Math.abs((new Date(visitData.records[resourceNum[j][i]].STKR__Due_Date__c).getTime()-new Date(rawData[0].value).getTime())/(24*60*60*1000)));
                            notOverdueNotFixVisit.push([days,resourceNum[j][i]]);
                        }
                        //dayVisit.push([daysNoverdue,resourceNum[j][i]]);
                        //console.log(daysNoverdue);
                        
                        //console.log(notOverdueNotFixVisit);
                    }
                    // re-structure the [days] and [visit]
                    for (var i in notOverdueNotFixVisit){
                        if (visitData.records[notOverdueNotFixVisit[i][1]].STKR__Service__r.STKR__Frequency__c=="Weekly"){
                            //console.log("Weekly");
                            //request to visit, get all the data from service and visit
                            notOverdueNotFixVisit[i].push(7/visitData.records[notOverdueNotFixVisit[i][1]].STKR__Service__r.STKR__Service_Interval__c);
                            //console.log(visitData.records[notOverdueNotFixVisit[i][1]].STKR__Service__r.STKR__Service_Interval__c);
                            //know the total day user chose.
                        }else if (visitData.records[notOverdueNotFixVisit[i][1]].STKR__Service__r.STKR__Frequency__c=="Daily"){
                            notOverdueNotFixVisit[i].push(0);
                        }else if (visitData.records[notOverdueNotFixVisit[i][1]].STKR__Service__r.STKR__Frequency__c=="Monthly"){
                            //may be the number need to be changed
                            notOverdueNotFixVisit[i].push(30.5/visitData.records[notOverdueNotFixVisit[i][1]].STKR__Service__r.STKR__Service_Interval__c);
                            
                        }else if (visitData.records[notOverdueNotFixVisit[i][1]].STKR__Service__r.STKR__Frequency__c=="Yearly"){
                            notOverdueNotFixVisit[i].push(365/visitData.records[notOverdueNotFixVisit[i][1]].STKR__Service__r.STKR__Service_Interval__c);
                        }
                        
                        notOverdueNotFixVisit[i].push(resourceData.records[j].STKR__Lunch_Break_Minutes__c+visitData.records[notOverdueNotFixVisit[i][1]].STKR__Time_Allocation__c);
                        notOverdueNotFixVisit[i].push(resourceData.records[j].STKR__Working_Hours__c*60);
                        
                    }
                    
                    // push status -1 for fixvisit and 
                    if(!notOverdueFixVisit){
                        for(var i in notOverdueFixVisit){
                            notOverdueFixVisit[i].push(-1);
                        }
                        notOverdueNotFixVisit = notOverdueNotFixVisit.concat(notOverdueFixVisit);
                    }
                    /*group the array based on the same days, which means map{key:day, value:[visits,grade]}
                    
                    1. first sort based on days
                    2. delete the same elements
                    */
                    
                    
                    notOverdueNotFixVisit.sort(function(a,b){
                        return a[0]-b[0]
                    });
                    console.log(notOverdueNotFixVisit);
                    //delete the same element
                    for (i=0; i<notOverdueNotFixVisit.length-1;i++){
                        if (notOverdueNotFixVisit[i][0]===notOverdueNotFixVisit[i+1][0]){
                            console.log("notOverdueNotFixVisit[i][0]===notOverdueNotFixVisit[i+1][0]");
                            if (notOverdueNotFixVisit[i][1].length){
                                notOverdueNotFixVisit[i][1].push(notOverdueNotFixVisit[i+1][1]);
                                notOverdueNotFixVisit[i][2].push(notOverdueNotFixVisit[i+1][2]);
                                notOverdueNotFixVisit[i][3].push(notOverdueNotFixVisit[i+1][3]);
                            }else{
                                var tem=notOverdueNotFixVisit[i][1];
                                notOverdueNotFixVisit[i][1]=[];
                                notOverdueNotFixVisit[i][1].push(tem,notOverdueNotFixVisit[i+1][1]);
                                var tem =notOverdueNotFixVisit[i][2];
                                notOverdueNotFixVisit[i][2]=[];
                                notOverdueNotFixVisit[i][2].push(tem,notOverdueNotFixVisit[i+1][2]);
                                var tem =notOverdueNotFixVisit[i][3];
                                notOverdueNotFixVisit[i][3]=[];
                                notOverdueNotFixVisit[i][3].push(tem+notOverdueNotFixVisit[i+1][3]);
                            }
                            notOverdueNotFixVisit.splice(i+1,1);
                            i--;
                        }
                        console.log(notOverdueNotFixVisit);
                    }
                    // 
                    for (var i of notOverdueNotFixVisit){
                    }
                    //get time for calculation
                    console.log(notOverdueNotFixVisit);
                    NOverdueNFix.push(notOverdueNotFixVisit);
                    NOverdueFix.push(notOverdueFixVisit);    
                }
                
                console.log(NOverdueNFix);
                console.log(NOverdueFix);
                
                
                predictDay(OverdueNFix,OverdueFix,NOverdueNFix,NOverdueFix);
            }     
            
            /*
            overdue problem
            var OverdueFix=[];
            var OverdueNFix=[];
            
            var overdueNotFixVisit=[];
            var overdueFixVisit=[];
            
            && visitData.records[resourceNum[j][i]].STKR__Days_Overdue__c==0.0
            
             }else if (visitData.records[resourceNum[j][i]].STKR__Fixed_Visit__c!="true" && visitData.records[resourceNum[j][i]].STKR__Days_Overdue__c !=0.0){
                            //it is fix visit and is overdue visit
                            
                            console.log("it is not fix visit and is overdue visit");
                            overdueNotFixVisit.push(resourceNum[j][i]);
                        }else{
                            //it is fix visit and overdue visit
                            console.log("it is fix visit and overdue visit");
                            overdueFixVisit.push(resourceNum[j][i]);                        
                        }
                        OverdueFix.push(overdueFixVisit);
                    OverdueNFix.push(overdueNotFixVisit);
            */
            
            /*
                    schedualId.push(visitData.records[i].STKR__Service__r.Id);
                    
                    
                        // this is not fix_visit
                        
                        //for day
                    }                        if (visitData.records[i].STKR__Service_Owner__c==resourceData.records[j].Id)

                    
                    //visitData.records[i].STKR__Service__r.STKR__Frequency__c
                    
               
                   
                console.log();
                
                for(i=0; i<resourceData.size;i++){
                    /*
                    for(j=0; j<visitData.size;j++){
                    	if (visitData.records[j].STKR__Planned_Date__c<resourceData.records[i].STKR__Expiry_Date__c){
                            if (visitData.record[j].STKR__Resource__c==resourceData.records[i].id){
                            	
                            }
                            //.push(resourceData.records[i].STKR__Working_Hours__c-resourceData.records[i].STKR__Lunch_Break_Minutes__c)
                           }
                    }
                    
					                        if (visitData.records[i].STKR__Service_Owner__c==resourceData.records[j].Id)

                    lunchBreak.push(resourceData.records[i].STKR__Lunch_Break_Minutes__c);
                    workingHours.push(resourceData.records[i].STKR__Working_Hours__c);
                    
                }
                
            //console.log(lunchBreak);
                // formulate
                
                */
            
            function predictDay(overdueNotFixVisit,overdueFixVisit,notOverdueNotFixVisit,notOverdueFixVisit){
            }
            
            function valueForm (rawdata){
                var resource=[];
                var territory=[];
                for (i=0;i<rawdata.length;i++){
                    if(rawdata[i].name=="territory"){
                        territory.push("'"+rawdata[i].value+"'");
                    }
                    // for example :  STKR__ParentId__c, STKR__Territory__c ,STKR__Resource_Name__c, STKR__Planned_Date__c, STKR__Account_lkp__r.STKR__Location__longitude__s, STKR__Account_lkp__r.STKR__Location__latitude__s from STKR__Visit__c where STKR__Planned_Date__c< 2019-06-19T08:26:00.000+0000 and STKR__Planned_Date__c> 2018-07-10T08:00:00.000+0000 and STKR__Resource_Name__c='Kang' and STKR__Account_lkp__r.STKR__Territory__r.Name in ('Cardiff', 'Caerphilly')
                    if (rawdata[i].name=="resource"){
                        resource.push("'"+rawdata[i].value+"'");
                    }
                }
                return [resource,territory];
            }
            function requestResource(rawdata){
                var resource=valueForm(rawdata);
                var query="select Id,Name,STKR__Lunch_Break_Minutes__c, STKR__Expiry_Date__c, STKR__EndOfDay__c, STKR__Working_Hours__c from STKR__Resource__c where Id in ("+resource[0].toString()+")";
                console.log(query);
                try{
                    sforce.connection.sessionId="{!$Api.Session_ID}";
                    var queryResult=sforce.connection.query(query);
                }catch(error)
                {
                    console.log(error);
                }
                return queryResult;
            }
            
            //input: the raw data output: filter data using Query
            function requestToSforce(data){
                var resource=valueForm(data);
                var territory=resource[1];
                resource=resource[0];
                
                /*
                //get the resource and terrritory from the raw data
                for (i=0; i<= data.length-1; i++){
                    //console.log(i);
                    //console.log(data[i].name=="resource");
                    if(data[i].name=="territory"){
                        territory.push("'"+data[i].value+"'");
                    }
                    // for example : SELECT STKR__Next_Visit_Date__c STKR__ParentId__c, STKR__Territory__c ,STKR__Resource_Name__c, STKR__Planned_Date__c, STKR__Account_lkp__r.STKR__Location__longitude__s, STKR__Account_lkp__r.STKR__Location__latitude__s from STKR__Visit__c where STKR__Planned_Date__c< 2019-06-19T08:26:00.000+0000 and STKR__Planned_Date__c> 2018-07-10T08:00:00.000+0000 and STKR__Resource_Name__c='Kang' and STKR__Account_lkp__r.STKR__Territory__r.Name in ('Cardiff', 'Caerphilly')
                    if (data[i].name=="resource"){
                        resource.push("'"+data[i].value+"'");
                        
                    }
                }
                */
                // query to find the lantitude and longtitude
                // old way is using for loop to send request one by one based on the resource and territory
                //best way is use one request get multiple resources and territories.
                var query="SELECT Id,Name,STKR__Service__r.STKR__Service_Interval__c,STKR__Due_Date__c,STKR__Days_Overdue__c,STKR__Account_lkp__r.Id,STKR__Service__r.Id,STKR__Fixed_Visit__c, STKR__Service__r.STKR__Last_Scheduled_Visit__c,STKR__Service__r.STKR__Frequency__c, STKR__Service__r.STKR__Contract_End_Date__c,STKR__Service__r.STKR__Fix_all_Visits__c, STKR__Service__r.STKR__Start_Date__c, STKR__Service__r.STKR__Time_Allocation__c, STKR__Service__r.STKR__Service_Owner__c, STKR__Account_lkp__r.STKR__Location__longitude__s, STKR__Account_lkp__r.STKR__Location__latitude__s from STKR__Visit__c where STKR__Account_lkp__c in (SELECT Id from Account where STKR__Territory__c in ("+territory.toString()+")) and STKR__Service__r.STKR__Service_Owner__c in ("+resource.toString()+") and STKR__Planned_Date__c< "+data[1].value+"T00:00:00.000+0000 and STKR__Planned_Date__c> "+data[0].value+"T00:00:00.000+0000";
                console.log(query);
                try{
                    sforce.connection.sessionId="{!$Api.Session_ID}";
                    var queryResult=sforce.connection.query(query);
                }catch(error)
                {
                    console.log(error);
                }
                console.log(queryResult);
                return queryResult;
            }
            function locationNum(mappingJson,data){
                /*
                latitude=latitude.filter(function(elem, index, self){
                    return index===self.indexOf(elem)})
                longitude=longitude.filter(function(elem, index, self){
                    return index===self.indexOf(elem)})
                console.log(latitude);
                console.log(longitude);
                */
                var accountLocation=[];
                for (i=0; i<data.size-1; i++){
                    if(data.records[i].STKR__Account_lkp__r.Id!=data.records[i+1].STKR__Account_lkp__r.Id){
                        var lat=Number(data.records[i].STKR__Account_lkp__r.STKR__location__Latitude__s);
                        var lng=Number(data.records[i].STKR__Account_lkp__r.STKR__location__Longitude__s);
                        var latLng=lat+","+lng;
                        mappingJson.locations.push(latLng);
                        accountLocation.push(i);
                    }
                }
                return accountLocation;
            }
            
            function generateMapJson(data){
                
                var mappingJson={};
                var locations=[];
                mappingJson.locations=locations;
                
                var accountLocation=locationNum(mappingJson,data);
                
                console.log("the index of different location or Account:"+accountLocation);
                
                //consider about the multiple location
                if (mappingJson.locations.length <= 24){
                    mappingJson.options={};
                    mappingJson.options={"allToAll" :true};
                    return JSON.stringify(mappingJson)
                }else{
                    //need mutiple requests based on the n*n matrix, such as 30*30, 3 request; 45*45
                    mutipleRequest(mappingJson,mappingJson.locations.length);
                    return 0;
                }
                
                
                /*
                for(i=0;i<=data.size-1;i++){
                    //mappingJson.location[i].latLng=latLng;
                    var lat=data.records[i].STKR__Account_lkp__r.STKR__location__Latitude__s;
                    var lng=data.records[i].STKR__Account_lkp__r.STKR__location__Longitude__s;
                    latLng={"lat": lat,
                           "lng": lng}
                    //mappingJson.location[i].latLng.push(latLng);
                    //mappingJson.location[i].latLng.lat=lat;
                    //mappingJson.location[i].latLng.lng=lng;
                    }
                    */
                
            }
            
            /*
          function getdistance() {
          var mappingJson='';
          mappingJson += '{ locations: [ "Denver, CO", "Westminster, CO", "Boulder, CO"], "options": { "allToAll": true }}';
          $.ajax({
          url: 'https://www.mapquestapi.com/directions/v2/routematrix',
          crossDomain: true,
          dataType: 'jsonp',
          
          type: 'POST',
          data:{
          	key: decodeURI("XFI9f8gkExRTk58rq7jyxDSMgkgt06KV"),
          	json: JSON.stringify({ "location" : [ "Cardiff, GB", "Caerphilly, GB", "Newport, GB"], "options": { "allToAll": true}})
          },
          success: function(data){ console.log(data);},
          error: function(data) {
          	console.log('error occurred -' + data);
          },
          beforeSend: setHeader,

      });
      */
            //          var xmlhttp= new XMLHttpRequest();
            //if (this.readyState == 4 && this.status == 200) 
            //{
            //            document.getElementById("availablityResults").innerHTML=this.responseText;
            //}STKR__Period_End__c
            //xmlhttp.open("POST", "https://www.mapquestapi.com/directions/v2/routematrix?key=XFI9f8gkExRTk58rq7jyxDSMgkgt06KV", true);
            //xmlhttp.setRequestHeader("Content-Type", "application/json");
            //xmlhttp.send(JSON.stringify({ "location" : [ "Cardiff, GB", "Caerphilly, GB", "Newport, GB"], "options": { "allToAll": true}}));
            //console.log(xmlhttp.responseText);
            //}
            
            </script>
            
        </head>
        <body>
            <apex:pageBlock title="Route Optimisation">
                
                <form id="matrixForm" method="POST" action="http://www.mapquestapi.com/directions/v2/routematrix?key=iJHqMi80cdsL6r70ePqDTYXHeSoNjx2Y">
                    <div id="date_container">
                        
                        <div>
                            <label>From Date </label>
                            <input type="date" id="fromDate" name="formDate"/>    
                        </div>
                        <div style='width: 30%;'></div>
                        
                        <div style='float:left;'>
                            <label>To Date</label>
                            <input type="date" id="toDate" name="toDate"/>    
                        </div>
                    </div>
                    
                    
                    <div id="resource">
                        
                    </div>
                    
                    
                    <div id="territory">
                        
                    </div>
                    <div>
                        <input type="submit" name="submit" value="Find Nearest Tech"/>    
                    </div>
                    
                </form>
                <div id="result" style="display: none;">
                    <div class="header">
                    </div>
                    
                    <br/>
                    
                    <div id="map" style="width: 100%; height: 530px; display: none;"></div>
                    
                    <div class="individual">
                    </div>
                    <div class="route"></div>
                </div>
            </apex:pageBlock>
        </body>
    </html>
</apex:page>