<apex:page controller="MapControllertest" showHeader="true" sidebar="false">	
<html>
        <head>    
            <title>Route Optimisation</title>
            <script src="./../soap/ajax/43.0/connection.js" type="text/javascript"></script>
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
            <script src="https://api.mqcdn.com/sdk/mapquest-js/v1.3.1/mapquest.js"></script>
            <link rel="stylesheet" href="https://api.mqcdn.com/sdk/mapquest-js/v1.3.1/mapquest.css"/>
                <style>
                #date_container {
            display: flex;
            justify-content: center;
            }
            
            .result{
            	display: flex;
                height: 100%;
                flex-direction: column;
            }
            .header,.footer{
                flex:none;
            }
            .container{
                display: flex;
                flex: 1 0 auto;
                flex-direction: colum;
                padding: 1em;
            }
            .main{
                margin-top: 1em;
                order:1;
            }
            .right{order: 2;}
            .left{
                order: -1;
            }
            .left,.right{
                padding: 1em;
                border-radius: 3px;
                background: rgba(147, 128, 108, 0.1);
            }
            
            @media (min-width: 768px) {
                .container {
                    flex-direction: row;
                }
                .main {
                    flex: 1;
                    padding: 1em;
                    margin: 0;
                }
                .left, .right {
                    flex: 0 0 12em;
                }
            }
            
            </style>
            
            
            <script type="text/javascript">
                //distribute the Monday-Starday
                var resources = [];
            var territories = [];
            window.onload = function() {
                //optimizedwaypoints example can be used
                //https://developer.mapquest.com/documentation/mapquest-js/v1.3/examples/directions-with-optimized-waypoints/
                L.mapquest.key = '99JBw7RAaWzJmd7nMADgsOdbJseEtVPZ';
                
                var map = L.mapquest.map('map', {
                    center: [40.7128, -74.0059],
                    layers: L.mapquest.tileLayer('map'),
                    zoom: 13
                });
                map.addControl(L.mapquest.control());
                L.mapquest.directions().route({
                    start: '350 5th Ave, New York, NY 10118',
                    end: 'One Liberty Plaza, New York, NY 10006'
                });
                
                //generate the HTML and add name
                <apex:repeat value="{!objectResource}" var="resource" id="resources">
                    var pResource=document.createElement("label");
                var node=document.createTextNode('{!resource.name}');
                var element=document.getElementById("resource");
                pResource.appendChild(node);
                element.appendChild(pResource);
                var checkboxResource=document.createElement("input");
                checkboxResource.name="resource";
                checkboxResource.value='{!resource.Id}';
                checkboxResource.setAttribute('type', 'checkbox');
                element.appendChild(checkboxResource);
                
                
                var resource ={
                    name: '{!resource.name}',
                    id:'{!resource.Id}',
                };
                resources.push(resource);
                
                </apex:repeat>
                // console.log(resources);
                //console.log(resources.length);
                
                <apex:repeat value="{!objectTerritory}" var="territory" id="territories">
                    var pResource=document.createElement("label");
                var node=document.createTextNode('{!territory.name}');
                var element=document.getElementById("territory");
                pResource.appendChild(node);
                element.appendChild(pResource);
                var checkboxResource=document.createElement("input");
                checkboxResource.setAttribute('type', 'checkbox');
                checkboxResource.name="territory";
                checkboxResource.value='{!territory.Id}';
                element.appendChild(checkboxResource);
                
                var territory ={
                    name: '{!territory.name}',
                    id:'{!territory.Id}'
                };
                
                territories.push(territory);
                
                </apex:repeat>
            }
            
            
            
            
            $(document).ready(function(){
                var status = 0;
                $("#result").show();
                
                //js json Ajax
                $("#matrixForm").submit(function(event){
                    //getting data from the Form.
                    var rawData=$("#matrixForm").serializeArray();
                    //console.log(rawData);
                    
                    //prevent send request
                    event.preventDefault();
                    var territory=[];
                    var resource=[];
                    var accountLocation=[];
                    //get the visitData
                    var visitData=requestToSforce(rawData);
                    
                    //console.log(visitData);
                    //get the resourcedata
                    var resourceData=requestResource(rawData);
                    //console.log(resourceData);
                    //get the different Json file
                    var generatejson=generateMapJson(visitData,accountLocation );
                    //console.log(generatejson);
                    
                    getTravelTime(generatejson,resourceData,visitData,rawData,accountLocation);
                    console.log("show result please");
                    //generateTerritory(rawData);
                    //sameLocation(visitData,accountLocation);
                    //var mappingJson=JSON.stringify({locations,options:allToAll});
                });
            });
            function generateTerritory(rawdata){
                //generate territory button
                var resource=[];
                var territory=[];
                console.log(rawdata);
                for (i=0;i<rawdata.length;i++){
                    if(rawdata[i].name=="territory"){
                        territory.push(rawdata[i].value);
                    }
                    if (rawdata[i].name=="resource"){
                        resource.push(rawdata[i].value);
                    }
                }
                
                console.log(territory);
                console.log(resource);
                console.log(territories);
                console.log(resources);
                for (var i=0; i<territory.length;i++){
                    for(var j=0; j<territories.length;j++){
                        if(territories[j].id==territory[i]){
                            var r=$('<button style="width:'+((1/territory.length).toFixed(2)-0.01)*100+'%;" id="'+territory[i]+'">'+territories[j].name+'</button>');
                            $("#territoryButton").show().append(r);}
                    }
                }
                $("#territoryButton").children("button").click(function(event){
                    alert(event.target.id);
                });
                
            }

            function generateDayList(rawdata,optimizationday){
                var days = Math.round(Math.abs((new Date(rawData[1].value).getTime()-new Date(rawData[0].value).getTime())/(24*60*60*1000)));
                for(var i of optimizationday){
                    
                }
                for(var i=0;i<days;i++){
                    var r=$('<div></div>');
                    $("#dayresult").show().append(r);
                }
                
                $("dayresult").children("div").click(function(event){
                    alert("cool");
                })
            }

            //input : return data by POST. output : show the map
            function renderMap(data){
                
            }
            // find the locations >= 25, need cluster location
            //it is one of clever way to deal with limitations problems(optimized route with more than 25 stops)
            function culsterlocation(mappingJson){
                if (mappingJson.locations.length<=24){
                    return 0;
                }else if(mappingJson.locations.length<=99){
                    return mutipleRequest(mappingJson);
                }else{
                    console.log("the location is too much");
                }
            }
            
            // it is a stupid way to deal with problem.obtain the full distance matrix through the different request.
            function mutipleRequest(mappingJson){
                var temMappingJson={};
                temMappingJson.locations=locations;
                for(i=0;i<mappingJson.locations.length/25+1;i++){
                    //splite data for different requests
                    for(j=0;j<mappingJson.locations.length; j++){
                        temMappingJson.locations.push(mappingJson.locations[j+i*25]);
                    }
                    getTravelTime(temMappingJson)
                }
            }
            // generate the Json file
            //input :specific date and resource, territory output: the location 
            function getLocation(data){
                
            }
            
            //input: data from the mapquest response. output: the time and distance
            function getTravelTime(mappingJson,resourceData,visitData,rawData,accountLocation){
                
                console.log(resourceData.length);
                var RouteMatrix=[];
                var promises=[];
                for(var i=0; i<mappingJson.length;i++){
                    
                    //console.log(visitData.length);
                    //console.log(mappingJson);
                    var request=$.ajax({
                        
                        type: 'POST',
                        dataType: 'jsonp',
                        contentType: 'json',
                        url: "http://www.mapquestapi.com/directions/v2/routematrix",
                        data: {key: decodeURI("99JBw7RAaWzJmd7nMADgsOdbJseEtVPZ"),
                               json: mappingJson[i]}
                        /*
                        success: function(data){
                            status++;
                            console.log("iteration success");
                            
                            console.log("successdata"+status);
                            RouteMatrix.push(data);
                        },
                        error: function(data){
                            
                            status++;    
                            console.log("iteration error" + status);
                            console.log("error");
                            
                        },
                        */
                    });
                    promises.push(request);
                    //timelist.push(request.responseJSON);
                    //console.log(timelist);
                }
                console.log('about to wait....' + resourceData.length);            
                $.when.apply($, promises).done(function(jsonp){
                    optimisation(arguments,resourceData,visitData,rawData,accountLocation);
                });
                console.dir(promises);
                console.log('final');
                
            }
            function callback(request){
                for(var i; i<request.length;i++){
                    console.request(i);
                    console.request(request[i]);
                    console.log(request[i].responseJSON);    
                }
                console.log("This is Callback function")
                
            }
            //try to cluster the location 
            
            function sameLocation(visitData,accountLocation,timeMatrix){
                for(var i=0; i<visitData.length;i++){
                    var Matrix=timeMatrix[i];
                    var visit=visitData[i];
                    console.log(visit);
                    for(var j=0;j<visit.size;j++){
                        console.log(visit.records[j]);
                        for(var a=0; a<accountLocation[i].length; a++){
                            var samelocation=[];
                            if(visit.records[j].STKR__Days_Overdue__c!=visit.records[accountLocation[i][a]].STKR__Account_1kp__r.Id){
                                console.log(visit.records[j].Id);
                            }
                        }
                    }
                }
               
                /*
            	for(var i=0; i<visitData.length;i++){
                	var visit=visitData[i];
                    for(var j in visit){
                        console.log(visit);
                    	for(var a in accountLocation[i]){
                        	console.log(accountLocation[i][a]);
                        }
                    }
                }
                */
            }
            function arrayMin(arrs){
                if(arrs[0]){
                    var min=arrs[0];}else{
                    var min=arrs[1];
                    }
                
                for(var i=1, ilen=arrs.length; i<ilen; i+=1){
                    if(arrs[i]){
                        if(arrs[i]<min){
                            min=arrs[i];
                        }
                    }else{
                    	
                    }
                }
                return min;
            }

            
            /*
                return $.when.apply(null, timelist).done(function(timelist){
                    console.log(timelist);
                    return timelist;
                })
                 */
            //send your resource location with different location to Mapquest
            
            
            //timeMatrix and resourceData and visitData is array for different territory
            function optimisation(timeMatrix, resourceData,visitData,rawData,accountLocation){
                //sameLocation(visitData,accountLocation,timeMatrix);
                console.log(timeMatrix);
                console.log(resourceData);
                console.log(visitData);
                console.log(accountLocation);
                //different territory in different scheduel
                for(var i=0; i<visitData.length;i++){
                    var resource=resourceData[i];
                    var visit=visitData[i];
                    var Matrix=timeMatrix[i];
                    console.log("my visit data length is"+visitData.length+"this is my"+i+"times");
                    //different resource get different job
                    var resourceNum=[];
                    console.log(visit);
                    console.log(resource);
                    console.log(Matrix[0].time);
                    
                    for(var j=0;j<resource.size;j++){
                        var jobSeperated=[];
                        for(var a=0; a<visit.size;a++){
                            //console.log(a);
                            if(!resource.records.length){
                                //console.log(resource.records.Id);
                                //Problem: situation: many visits and resources
                                //but no output
                                //reason: visit owner != resource id
                                //In this territory, we can find the target resource.
                                //resource and visit are not under the same territory.
                                if (visit.records[a].STKR__Service__r.STKR__Service_Owner__c==resource.records.Id)
                                {
                                    jobSeperated.push(a);
                                }
                            }
                            else{
                                if (visit.records[a].STKR__Service__r.STKR__Service_Owner__c==resource.records[j].Id)
                                {
                                    jobSeperated.push(a);
                                }
                            }
                            
                        }
                        resourceNum.push(jobSeperated);
                    }                	
                    
                    
                    var days = Math.round(Math.abs((new Date(rawData[1].value).getTime()-new Date(rawData[0].value).getTime())/(24*60*60*1000)));
                    
                    
                    console.log(resourceNum);
                    
                    var NOverdueNFix=[];
                    var NOverdueFix=[];
                    //seperated job
                    var promises=[];
                    for(var j=0;j<resourceNum.length;j++){
                        var notOverdueNotFixVisit=[];
                        var notOverdueFixVisit=[];
                        //send the resource location with multiple visit location to mapquest
                        //sendRToV(j);
                        var mappingJson={};
                        var locations=[];
                        
                        mappingJson.locations=locations;
                        console.log(resource);
                        if(!resource.records.length){                            
                            //console.log(resource.records[j].STKR__Fixed_Location__Latitude__s );
                            //console.log(resource.records.STKR__Fixed_Location__Latitude__s);
                            var lat=Number(resource.records.STKR__Fixed_Location__Latitude__s);
                            var lng=Number(resource.records.STKR__Fixed_Location__Longitude__s );
                        }else{
                            var lat=Number(resource.records[j].STKR__Fixed_Location__Latitude__s);
                            var lng=Number(resource.records[j].STKR__Fixed_Location__Longitude__s );
                            
                            
                        }
                        var latLng=lat+","+lng;
                        console.log(latLng+"this is my"+j+"request");
                        mappingJson.locations.push(latLng);
                        for(var b in resourceNum[i]){
                            lat=Number(visit.records[resourceNum[j][b]].STKR__Account_lkp__r.STKR__location__Latitude__s);
                            lng=Number(visit.records[resourceNum[j][b]].STKR__Account_lkp__r.STKR__location__Longitude__s);
                            latLng=lat+","+lng;
                            mappingJson.locations.push(latLng);
                        }
                        mappingJson.options={};
                        mappingJson.options={"allToAll" :false};
                        mappingJson=JSON.stringify(mappingJson);
                        //console.log(mappingJson);
                        var request=$.ajax({
                            
                            type: 'POST',
                            dataType: 'jsonp',
                            contentType: 'json',
                            url: "http://www.mapquestapi.com/directions/v2/routematrix",
                            data: {key: decodeURI("99JBw7RAaWzJmd7nMADgsOdbJseEtVPZ"),
                                   json: mappingJson}
                        });
                        promises.push(request);
                        
                        $.when.apply($, promises).done(function(jsonp){
                            console.log(arguments);
                        });
                        for(var b in resourceNum[j]){
                            //console.log(visit.records[resourceNum[j][b]].STKR__Fixed_Visit__c);
                            if(visit.records[resourceNum[j][b]].STKR__Fixed_Visit__c=="true"){
                                //it is fix visit and not overdue visit.
                                var day=Math.round(Math.abs((new Date(visit.records[resourceNum[j][b]].STKR__Due_Date__c).getTime()-new Date(rawData[0].value).getTime())/(24*60*60*1000)));
                                notOverdueFixVisit.push([day,resourceNum[j][b]]);
                                //console.log("it is fix visit and not overdue visit");
                            }else{
                                //it is not fix visit and not overdue visit
                                //console.log("it is not fix visit and not overdue visit");
                                
                                var day=Math.round(Math.abs((new Date(visit.records[resourceNum[j][b]].STKR__Due_Date__c).getTime()-new Date(rawData[0].value).getTime())/(24*60*60*1000)));
                                //console.log(day);
                                //console.log(resourceNum[j][b]);
                                notOverdueNotFixVisit.push([day,resourceNum[j][b]]);
                                
                                
                                
                            }
                            //dayVisit.push([daysNoverdue,resourceNum[j][i]]);
                            //console.log(daysNoverdue);
                            
                        }
                       
                        // re-structure the [days] and [visit]
                        for (var c in notOverdueNotFixVisit){
                            //console.log(visit.records[notOverdueNotFixVisit[c][1]].STKR__Service__r.STKR__Frequency__c);
                            if (visit.records[notOverdueNotFixVisit[c][1]].STKR__Service__r.STKR__Frequency__c=="Weekly"){
                                //console.log("Weekly");Ian￼Mike￼Kang
                                //request to visit, get all the data from service and visit
                                //console.log(7/visit.records[notOverdueNotFixVisit[c][1]].STKR__Service__r.STKR__Service_Interval__c);
                                notOverdueNotFixVisit[c].push(7/visit.records[notOverdueNotFixVisit[c][1]].STKR__Service__r.STKR__Service_Interval__c);
                                //console.log(visitData.records[notOverdueNotFixVisit[i][1]].STKR__Service__r.STKR__Service_Interval__c);
                                //know the total day user chose.
                            }else if (visit.records[notOverdueNotFixVisit[c][1]].STKR__Service__r.STKR__Frequency__c=="Daily"){
                                notOverdueNotFixVisit[c].push(0);
                            }else if (visit.records[notOverdueNotFixVisit[c][1]].STKR__Service__r.STKR__Frequency__c=="Monthly"){
                                //may be the number need to be changed
                                notOverdueNotFixVisit[c].push(30.5/visit.records[notOverdueNotFixVisit[c][1]].STKR__Service__r.STKR__Service_Interval__c);
                                
                            }else if (visit.records[notOverdueNotFixVisit[c][1]].STKR__Service__r.STKR__Frequency__c=="Yearly"){
                                notOverdueNotFixVisit[c].push(365/visit.records[notOverdueNotFixVisit[c][1]].STKR__Service__r.STKR__Service_Interval__c);
                            }
                            notOverdueNotFixVisit[c].push(Number(resource.records[j].STKR__Lunch_Break_Minutes__c)+Number(visit.records[notOverdueNotFixVisit[c][1]].STKR__Service__r.STKR__Time_Allocation__c));
                            notOverdueNotFixVisit[c].push(resource.records[j].STKR__Working_Hours__c*60);
                            
                        }
                        
                        // push status -1 for fixvisit 
                        if(!notOverdueFixVisit){
                            for(var c in notOverdueFixVisit){
                                notOverdueFixVisit[c].push(-1);
                            }
                            notOverdueNotFixVisit = notOverdueNotFixVisit.concat(notOverdueFixVisit);
                        }
                        //console.log(notOverdueFixVisit);
                        /*group the array based on the same days, which means map{key:day, value:[visits,grade]}
                    
                    1. first sort based on days
                    2. delete the same elements
                                        */

                        
                        console.log(notOverdueNotFixVisit); 
                        notOverdueNotFixVisit.sort(function(a,b){
                            return a[0]-b[0]
                        });
                        console.log(notOverdueNotFixVisit);
                        
                        /*
                        //delete the same element
                        for (var c=0; c<notOverdueNotFixVisit.length-1;c++){
                            if (notOverdueNotFixVisit[c][0]===notOverdueNotFixVisit[c+1][0]){
                                //console.log("notOverdueNotFixVisit[i][0]===notOverdueNotFixVisit[i+1][0]");
                                if (notOverdueNotFixVisit[c][1].length){
                                    notOverdueNotFixVisit[c][1].push(notOverdueNotFixVisit[c+1][1]);
                                    notOverdueNotFixVisit[c][2].push(notOverdueNotFixVisit[c+1][2]);
                                    notOverdueNotFixVisit[c][3].push(notOverdueNotFixVisit[c+1][3]);
                                }else{
                                    var tem=notOverdueNotFixVisit[c][1];
                                    notOverdueNotFixVisit[c][1]=[];
                                    notOverdueNotFixVisit[c][1].push(tem,notOverdueNotFixVisit[c+1][1]);
                                    var tem =notOverdueNotFixVisit[c][2];
                                    notOverdueNotFixVisit[c][2]=[];
                                    notOverdueNotFixVisit[c][2].push(tem,notOverdueNotFixVisit[c+1][2]);
                                    var tem =notOverdueNotFixVisit[c][3];
                                    notOverdueNotFixVisit[c][3]=[];
                                    notOverdueNotFixVisit[c][3].push(tem+notOverdueNotFixVisit[c+1][3]);
                                }
                                notOverdueNotFixVisit.splice(c+1,1);
                                c--;
                            }
                            console.log(notOverdueNotFixVisit);
                        }
                        */
                        //array has been saved as [day, index, F/I, luch+collect, workhour]
                        
                        
                        
                        
                        console.log(notOverdueNotFixVisit);
                        NOverdueNFix.push(notOverdueNotFixVisit);
                        NOverdueFix.push(notOverdueFixVisit);
                    }
                    
                    console.log(NOverdueNFix);
                    console.log(NOverdueFix);
                    
                }     
            }
            /*
            overdue problem
            var OverdueFix=[];
            var OverdueNFix=[];
            
            var overdueNotFixVisit=[];
            var overdueFixVisit=[];
            
            && visitData.records[resourceNum[j][i]].STKR__Days_Overdue__c==0.0
            
             }else if (visitData.records[resourceNum[j][i]].STKR__Fixed_Visit__c!="true" && visitData.records[resourceNum[j][i]].STKR__Days_Overdue__c !=0.0){
                            //it is fix visit and is overdue visit
                            
                            console.log("it is not fix visit and is overdue visit");
                            overdueNotFixVisit.push(resourceNum[j][i]);
                        }else{
                            //it is fix visit and overdue visit
                            console.log("it is fix visit and overdue visit");
                            overdueFixVisit.push(resourceNum[j][i]);                        
                        }
                        OverdueFix.push(overdueFixVisit);
                    OverdueNFix.push(overdueNotFixVisit);
            */
            
            /*
                    schedualId.push(visitData.records[i].STKR__Service__r.Id);
                    
                    
                        // this is not fix_visit
                        
                        //for day
                    }                        if (visitData.records[i].STKR__Service_Owner__c==resourceData.records[j].Id)

                    
                    //visitData.records[i].STKR__Service__r.STKR__Frequency__c
                    
               
                   
                console.log();
                
                for(i=0; i<resourceData.size;i++){
                    /*
                    for(j=0; j<visitData.size;j++){
                    	if (visitData.records[j].STKR__Planned_Date__c<resourceData.records[i].STKR__Expiry_Date__c){
                            if (visitData.record[j].STKR__Resource__c==resourceData.records[i].id){
                            	
                            }
                            //.push(resourceData.records[i].STKR__Working_Hours__c-resourceData.records[i].STKR__Lunch_Break_Minutes__c)
                           }
                    }
                    
					                        if (visitData.records[i].STKR__Service_Owner__c==resourceData.records[j].Id)

                    lunchBreak.push(resourceData.records[i].STKR__Lunch_Break_Minutes__c);
                    workingHours.push(resourceData.records[i].STKR__Working_Hours__c);
                    
                }
                
            //console.log(lunchBreak);
                // formulate
                
                */
            
            function predictDay(overdueNotFixVisit,overdueFixVisit,notOverdueNotFixVisit,notOverdueFixVisit){
            }
            
            function valueForm (rawdata){
                var resource=[];
                var territory=[];
                for (i=0;i<rawdata.length;i++){
                    if(rawdata[i].name=="territory"){
                        territory.push("'"+rawdata[i].value+"'");
                    }
                    // for example :  STKR__ParentId__c, STKR__Territory__c ,STKR__Resource_Name__c, STKR__Planned_Date__c, STKR__Account_lkp__r.STKR__Location__longitude__s, STKR__Account_lkp__r.STKR__Location__latitude__s from STKR__Visit__c where STKR__Planned_Date__c< 2019-06-19T08:26:00.000+0000 and STKR__Planned_Date__c> 2018-07-10T08:00:00.000+0000 and STKR__Resource_Name__c='Kang' and STKR__Account_lkp__r.STKR__Territory__r.Name in ('Cardiff', 'Caerphilly')
                    if (rawdata[i].name=="resource"){
                        resource.push("'"+rawdata[i].value+"'");
                    }
                }
                return [resource,territory];
            }
            function requestResource(rawdata){
                var resource=valueForm(rawdata);
                var result=[];
                for(var i of resource[1]){
                    var query="select Id,Name,STKR__Lunch_Break_Minutes__c, STKR__Expiry_Date__c, STKR__EndOfDay__c, STKR__Working_Hours__c,STKR__Fixed_Location__longitude__s,STKR__Fixed_Location__latitude__s from STKR__Resource__c where Id in ("+resource[0].toString()+") and STKR__Territory__c in ("+i+")";
                    //console.log(query);
                    try{
                        sforce.connection.sessionId="{!$Api.Session_ID}";
                        var queryResult=sforce.connection.query(query);
                        result.push(queryResult);
                    }catch(error)
                    {
                        console.log(error);
                    }
                }
                return result;
            }
            
            //input: the raw data output: filter data using Query
            function requestToSforce(data){
                var resource=valueForm(data);
                var territory=resource[1];
                var result=[];
                resource=resource[0];
                // query to find the lantitude and longtitude
                // old way is using for loop to send request one by one based on the resource and territory
                //best way is use one request get multiple resources and territories.
                for(var i of territory){     
                    var query="SELECT Id,Name,STKR__Service__r.STKR__Service_Interval__c,STKR__Due_Date__c,STKR__Days_Overdue__c,STKR__Account_lkp__r.Id,STKR__Service__r.Id,STKR__Fixed_Visit__c, STKR__Service__r.STKR__Last_Scheduled_Visit__c,STKR__Service__r.STKR__Frequency__c, STKR__Service__r.STKR__Contract_End_Date__c,STKR__Service__r.STKR__Fix_all_Visits__c, STKR__Service__r.STKR__Start_Date__c, STKR__Service__r.STKR__Time_Allocation__c, STKR__Service__r.STKR__Service_Owner__c, STKR__Account_lkp__r.STKR__Location__longitude__s, STKR__Account_lkp__r.STKR__Location__latitude__s from STKR__Visit__c where STKR__Account_lkp__c in (SELECT Id from Account where STKR__Territory__c in ("+i+")) and STKR__Service__r.STKR__Service_Owner__c in ("+resource.toString()+") and STKR__Planned_Date__c< "+data[1].value+"T00:00:00.000+0000 and STKR__Planned_Date__c> "+data[0].value+"T00:00:00.000+0000";
                    //console.log(query);
                    try{
                        sforce.connection.sessionId="{!$Api.Session_ID}";
                        var queryResult=sforce.connection.query(query);
                        result.push(queryResult);
                    }catch(error)
                    {
                        console.log(error);
                    }
                }
                return result;
            }
            function locationNum(mappingJson,data,accountLocation){

                var temLocation=[];
                var temsame=[];
                var lat=Number(data.records[0].STKR__Account_lkp__r.STKR__location__Latitude__s);
                var lng=Number(data.records[0].STKR__Account_lkp__r.STKR__location__Longitude__s);
                var latLng=lat+","+lng;
                mappingJson.locations.push(latLng);
                temLocation.push(data.records[0].STKR__Account_lkp__r.Id);

                for (i=0; i<data.size-1; i++){
                    if(data.records[i].STKR__Account_lkp__r.Id!=data.records[i+1].STKR__Account_lkp__r.Id){
                        var lat=Number(data.records[i+1].STKR__Account_lkp__r.STKR__location__Latitude__s);
                        var lng=Number(data.records[i+1].STKR__Account_lkp__r.STKR__location__Longitude__s);
                        var latLng=lat+","+lng;
                        mappingJson.locations.push(latLng);
                        temLocation.push(data.records[i+1].Name);
                        
                    }else{
                    	console.log(data.records[i].Name);
                    }
                    
                }
                accountLocation.push(temLocation);
                return accountLocation;
            }
            
            function generateMapJson(data,accountLocation){
                var mappingJsonList=[];
                console.log(data.length);
                for(var i=0; i<data.length; i++){
                    var mappingJson={};
                    var locations=[];
                    var accountLocationtem=[];
                    mappingJson.locations=locations;
                    accountLocationtem=locationNum(mappingJson,data[i],accountLocation);
                    console.log("the index of different location or Account:"+accountLocationtem);
                    
                    //consider about the multiple location
                    if (accountLocationtem.length <= 24){
                        mappingJson.options={};
                        mappingJson.options={"allToAll" :true};
                        mappingJsonList.push(JSON.stringify(mappingJson));
                    }else{
                        //need mutiple requests based on the n*n matrix, such as 30*30, 3 request; 45*45
                        mutipleRequest(mappingJson,mappingJson.locations.length);
                    }
                }
                console.log(mappingJsonList);
                return mappingJsonList;
                
                
                /*
                for(i=0;i<=data.size-1;i++){
                    //mappingJson.location[i].latLng=latLng;
                    var lat=data.records[i].STKR__Account_lkp__r.STKR__location__Latitude__s;
                    var lng=data.records[i].STKR__Account_lkp__r.STKR__location__Longitude__s;
                    latLng={"lat": lat,
                           "lng": lng}
                    //mappingJson.location[i].latLng.push(latLng);
                    //mappingJson.location[i].latLng.lat=lat;
                    //mappingJson.location[i].latLng.lng=lng;
                    }
                    */
                
            }
            
            </script>
            
        </head>
        <body>
            <apex:pageBlock title="Route Optimisation">
                
                <form id="matrixForm">
                    <div id="date_container">
                        
                        <div>
                            <label>From Date </label>
                            <input type="date" id="fromDate" name="formDate"/>    
                        </div>
                        <div style='width: 30%;'></div>
                        
                        <div style='float:left;'>
                            <label>To Date</label>
                            <input type="date" id="toDate" name="toDate"/>    
                        </div>
                    </div>
                    
                    
                    <div id="resource">
                        
                    </div>
                    
                    
                    <div id="territory">
                        
                    </div>
                    <div>
                        <input type="submit" onclick="submit;" value="Route Optimisation"/>    
                    </div>
                    
                    
                </form>
                <hr />
                <div class="body" id="result">
                    <div id="territoryButton" class="header">
                    </div>
                    
                    <div class="container">
                        
                        <div id="dayresult" class="left">
                            <p>
                                aksdkhekhdkbcdsb
                            </p></div>    
                        <div class="right">
                            <p>kangasdhfoiasdf
                                adfsad</p></div>
                        <div class="main">
                            <p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.</p>  
                            
                            <div id="map"></div>
                        </div>
                    </div>
                    
                    <div class="footer"></div>
                </div>
            </apex:pageBlock>
        </body>
    </html>
</apex:page>