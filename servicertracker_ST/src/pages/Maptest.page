<apex:page controller="MapControllertest" showHeader="true" sidebar="false">	
    <html>
        <head>    
            <title>Route Optimisation</title>
            <script src="./../soap/ajax/43.0/connection.js" type="text/javascript"></script>
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
            <script src="https://api.mqcdn.com/sdk/mapquest-js/v1.3.1/mapquest.js"></script>
            <link rel="stylesheet" href="https://api.mqcdn.com/sdk/mapquest-js/v1.3.1/mapquest.css"/>
                <style>
                #date_container {
            display: flex;
            justify-content: center;
            }
            
            .result{
                display: flex;
                height: 100%;
                flex-direction: column;
            }
            .header,.footer{
                flex:none;
            }
            .container{
                display: flex;
                flex: 1 0 auto;
                flex-direction: colum;
                padding: 1em;
            }
            .main{
                margin-top: 1em;
                order:1;
            }
            .right{order: 2;}
            .left{
                order: -1;
            }
            .left,.right{
                padding: 1em;
                border-radius: 3px;
                background: rgba(147, 128, 108, 0.1);
            }
            
            @media (min-width: 768px) {
                .container {
                    flex-direction: row;
                }
                .main {
                    flex: 1;
                    padding: 1em;
                    margin: 0;
                }
                .left, .right {
                    flex: 0 0 12em;
                }
            }
            
            </style>
            
            
            <script type="text/javascript">
                //distribute the Monday-Starday
                var resources = [];
            var territories = [];
            window.onload = function() {
                //optimizedwaypoints example can be used
                //https://developer.mapquest.com/documentation/mapquest-js/v1.3/examples/directions-with-optimized-waypoints/
                
                //generate the HTML and add name
                <apex:repeat value="{!objectResource}" var="resource" id="resources">
                    var pResource=document.createElement("label");
                var node=document.createTextNode('{!resource.name}');
                var element=document.getElementById("resource");
                pResource.appendChild(node);
                element.appendChild(pResource);
                var checkboxResource=document.createElement("input");
                checkboxResource.name="resource";
                checkboxResource.value='{!resource.Id}';
                checkboxResource.setAttribute('type', 'checkbox');
                element.appendChild(checkboxResource);
                
                
                var resource ={
                    name: '{!resource.name}',
                    id:'{!resource.Id}',
                };
                resources.push(resource);
                
                </apex:repeat>
            }
            
            
            
            
            $(document).ready(function(){
                var status = 0;
                $("#result").show();
                
                //js json Ajax
                $("#matrixForm").submit(function(event){
                    start();
                    //sameLocation(visitData,accountLocation);
                    //var mappingJson=JSON.stringify({locations,options:allToAll});
                });
            });
            function start(){
                //getting data from the Form.
                var rawData=$("#matrixForm").serializeArray();
                //console.log(rawData);
                //prevent send request
                event.preventDefault();
                var resource=[];
                var accountLocation=[];
                var accoutSame=[];
                //get the visitData
                var visitData=requestToSforce(rawData);
                
                console.log(visitData);
                //get the resourcedata
                var resourceData=requestResource(rawData);
                //get the different Json file
                //console.log(resourceData);
                var resourGroup=[];
                var sameLocation=[];
                var jsonList=[];
                var sameLocationId=[];
                var sameList=[];
                var fixVisit=[];
                for(var i=0;i<resourceData.length;i++){
                    var geolocation=seperatevisit(visitData[i]);
                    var same=groupLocation(visitData[i]);
                    var fixvisit=seperateFixVisit(visitData[i]);
                    fixVisit.push(fixvisit);
                    //add fix location
                    geolocation=addFixlocation(geolocation,resourceData[i]);
                    sameList.push(same);
                    resourGroup.push(geolocation);
                    //
                    var generatejson=generateMapJson(geolocation,sameLocationId);
                    jsonList.push(generatejson);
                }
                console.log(fixVisit);
                console.log(sameList);
                console.log(sameLocationId);
                getTravelTime(jsonList,resourGroup,rawData,sameList,sameLocationId,fixVisit,resourceData,visitData);
                //distance.push(getDistance(geolocation[keys]);
                //var result=checkLocation(geolocation,resourceData);
                
                //console.log(result);
                
                //var generatejson=generateMapJson(rawData,visitData,result);
                console.log("show result please");
                
            }
            function addFixlocation(geolocation,resource){
                geolocation[resource.records.Id]=[resource.records.STKR__Fixed_Location__Latitude__s,resource.records.STKR__Fixed_Location__Longitude__s];
                return geolocation;
            }
            /*consider about the multiple location > 25, which is limited for mapquest
            
            */
            function groupLocation(geolocation){
                var result=jQuery.extend(true,{},geolocation);
                var distanceObj={};
                var temi=[];
                var temj=[];
                for(var i in geolocation){
                    for(j in geolocation){
                        if(i!=j){
                            var key=i+","+j;
                            temi.push(i);
                            temj.push(j);
                            var distance=getDistance(geolocation[i],geolocation[j]);
                            distanceObj[key]=distance;
                        }
                    }
                    delete geolocation[i];
                } 
                keysSorted=Object.keys(distanceObj).sort(function(a,b){return distanceObj[a]-distanceObj[b]});
                //maybe need values for checking wether we need group the location
                values=Object.keys(distanceObj).sort(function(a,b){return distanceObj[a]-distanceObj[b]}).map(key => distanceObj[key]);
                var lastIndex=keysSorted[0].indexOf(",");
                var s1=keysSorted[0].substring(0,lastIndex);
                var s2=keysSorted[0].substring(lastIndex+1);
                var s3=s1+","+s2;
                if(result[s1]=== undefined||result[s2]===undefined){
                    var tem=keysSorted[0].split(",");
                    for(var i=0;i<tem.length;i++){
                        
                        lastIndex=keysSorted[0].indexOf(",");
                        lastIndex=Number(lastIndex)*Number(i)+18+i;
                        s1=keysSorted[0].substring(0,lastIndex);
                        s2=keysSorted[0].substring(lastIndex+1);
                        if(result[s1]!=undefined){
                            break;
                        }
                    }
                }
                var midlocation=middlePoint(result[s1],result[s2]);
                
                result[s3]=midlocation;
                delete result[s1];
                delete result[s2];
                
                return result;
            }
            
            function middlePoint(location1,location2) {
                var lat1=location1[0];
                var lng1=location1[1];
                var lat2=location2[0];
                var lng2=location2[1];
                
                lat1 = lat1 * 0.017453292519943295;
                lng1 = lng1 * 0.017453292519943295;
                lat2 =lat2 * 0.017453292519943295;
                lng2 = lng2 * 0.017453292519943295;
                
                dlng = lng2 - lng1;
                Bx = Math.cos(lat2) * Math.cos(dlng);
                By = Math.cos(lat2) * Math.sin(dlng);
                lat3 = Math.atan2( Math.sin(lat1)+Math.sin(lat2),
                                  Math.sqrt((Math.cos(lat1)+Bx)*(Math.cos(lat1)+Bx) + By*By ));
                lng3 = lng1 + Math.atan2(By, (Math.cos(lat1) + Bx));
                pi = 3.141592653589793;
                lat = (lat3*180)/pi;
                lng = (lng3*180)/pi;
                return [lat.toString(),lng.toString()];
            }
            
            function getDistance(location1,location2) {
                var lat1=location1[0];
                var lon1=location1[1];
                var lat2=location2[0];
                var lon2=location2[1];
                var R = 6371; // Radius of the earth in km
                var dLat = deg2rad(lat2-lat1);  // deg2rad below
                var dLon = deg2rad(lon2-lon1); 
                var a = 
                    Math.sin(dLat/2) * Math.sin(dLat/2) +
                    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
                    Math.sin(dLon/2) * Math.sin(dLon/2); 
                var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
                var d = R * c; // Distance in km
                return d;
            }
            
            function deg2rad(deg) {
                return deg * (Math.PI/180)
            }
            
            function checkLocation(geolocation,resourceData){
                console.log(Object.keys(geolocation).length);
                if(Number(resourceData.size)+Number(Object.keys(geolocation).length)>25){
                    //geolocation=seperateLocation(geolocation);
                    var result=groupLocation(geolocation);
                    console.log("this is the your dead fucking loop");
                    checkLocation(result,resourceData);
                }else{
                    return geolocation;
                }
            }
            
            function seperateLocation(geolocation){
                var distance={};
                for(keys in geolocation){
                    geolocation[keys],geolocation[keys]
                    //distance.push(getDistance(geolocation[keys]);
                }                
            }
            
            /*change the UI show the result on web page
            
            */
                        
            function generateDayList(rawdata,optimizationday,resource,visit,arguments,sameList,sameLocation){
                console.log(optimizationday);
                var days = Math.round(Math.abs((new Date(rawdata[1].value).getTime()-new Date(rawdata[0].value).getTime())/(24*60*60*1000)));
                var startday=new Date(rawdata[0].value);
                console.log(startday);
                var index=0;
                    /*
                    if(j==optimizationday[j].records.Id){
                    
                    }
                    */
                    var startdayCopy=new Date(startday);
                for(var i=0;i<days;i++){
                    startdayCopy.setDate(startdayCopy.getDate()+(i+1));
                    console.log(startdayCopy);
                    
                    for(var j in optimizationday){
                        
                        
                        var r=$('<div value="'+j+','+(i+1)+'"><button style="width:100%"; >'+Number(startdayCopy.getDate())+'/'+(Number(startdayCopy.getMonth())+1)+' '+generatename(j,optimizationday,resource)+'</button></div>');
                        $("#dayresult").show().append(r);
                    }
                    startdayCopy=new Date(startday);

                    index++;
                }
                $("#dayresult").scroll(function(){
                    console.log("scrolling")
                });
                $("#dayresult").children("div").click({param1: optimizationday, param2: resource, param3: visit,param4:arguments,param5:sameList,param6:sameLocation},drawmap);
            }
            
            var map;
            function drawmap(event){
                var value=$(this).attr('value');
                var optimisation=event.data.param1;
                var resource=event.data.param2;
                var visit=event.data.param3;
                var sameList=event.data.param5;
                var sameLocation=event.data.param6;
                console.log(value);
                console.log(event.data.param1);
                console.log(event.data.param2);
                console.log(event.data.param3);
                var arguments=event.data.param4;

                // console.log(visit);
                
                var temarr=value.split(',');
                console.log(temarr[0]);
                console.log(temarr[1]);
                //console.log(optimisation[temarr[0]]);
                var fixgeolocation;
                var index;
                for(var i=0;i<resource.length;i++){
                	if(resource[i].records.Id==temarr[0]){
                        index=i;
                    	fixgeolocation=Number(resource[i].records.STKR__Fixed_Location__Latitude__s)+","+Number(resource[i].records.STKR__Fixed_Location__Longitude__s);
                    }
                }
                console.log(fixgeolocation);
                console.log(visit);
                console.log(arguments);
                console.log(sameLocation);
                console.log(sameList);
                console.log(optimisation[temarr[0]][temarr[1]]);
                var visitgeolocation=[];
                for(var i=0;i<optimisation[temarr[0]][temarr[1]].length;i++){
                	visitgeolocation.push(Number(visit[index].records[optimisation[temarr[0]][temarr[1]][i]].STKR__Account_lkp__r.STKR__location__Latitude__s)+","+Number(visit[index].records[optimisation[temarr[0]][temarr[1]][i]].STKR__Account_lkp__r.STKR__location__Longitude__s))
                }
                console.log(visitgeolocation);
                L.mapquest.key = 'dkPerqzFbKLtC7YWQSG51UlmJuGVuQEc';
                if(map != undefined || map != null){
                    map.remove();
                }
                
                

                map = L.mapquest.map('map', {
                    center: [51.570767, -3.203604],
                    layers: L.mapquest.tileLayer('map'),
                    zoom: 9
                });
                
                L.mapquest.directions().route({
                    start: fixgeolocation,
                    end: fixgeolocation,
                    waypoints: visitgeolocation,
                    optimizeWaypoints: true
                    
                });
                
                L.mapquest.control().addTo(map);
                L.mapquest.geocodingControl().addTo(map);

                
            }
            
            
            
            function generatename(j,optimizationday,resource){
                for(var i=0;i<resource.length;i++){
                    if(j==resource[i].records.Id){
                        return resource[i].records.Name;
                    }
                }
            }
                        
            // generate the Json file
            //input :specific date and resource, territory output: the location 
            
            //input: data from the mapquest response. output: the time and distance
            function getTravelTime(jsonList,resourGroup,rawData,sameList,sameLocationId,fixVisit,resourceData,visitData){
                var promises=[];
                for(var i=0;i<resourGroup.length;i++){
                    var request=$.ajax({
                        
                        type: 'POST',
                        dataType: 'jsonp',
                        contentType: 'json',
                        url: "http://www.mapquestapi.com/directions/v2/routematrix",
                        data: {key: decodeURI("dkPerqzFbKLtC7YWQSG51UlmJuGVuQEc"),
                               json: jsonList[i]}
                    });
                    promises.push(request);
                    
                    //console.log(timelist);
                }
                console.log('about to wait....' );            
                $.when.apply($, promises).done(function(jsonp){
                    var optimisationarry=optimisation(arguments,resourGroup,rawData,sameList,sameLocationId,fixVisit,resourceData,visitData);
                    generateDayList(rawData,optimisationarry,resourceData,visitData,arguments,sameList,sameLocationId);
                    
                });
                
            }
            
            
            function generateLocation(data){
                console.log(data);
                var result=[];
            	for(var i=0;i<data.length;i++){
                    console.log(data[i]);
                	if(data[i].size=="1"){
                    	if(data[i].records.type=="STKR__Resource__c"){
                        	result.push([Number(data[i].records.STKR__Fixed_Location__Latitude__s),Number(data[i].records.STKR__Fixed_Location__Longitude__s)]);
                        }
                    }
                }
                return result;
            }
            //try to cluster the location 
            
            function sameLocation(visitData,accountLocation,timeMatrix){
                for(var i=0; i<visitData.length;i++){
                    var Matrix=timeMatrix[i];
                    var visit=visitData[i];
                    console.log(visit);
                    for(var j=0;j<visit.size;j++){
                        console.log(visit.records[j]);
                        for(var a=0; a<accountLocation[i].length; a++){
                            var samelocation=[];
                            if(visit.records[j].STKR__Days_Overdue__c!=visit.records[accountLocation[i][a]].STKR__Account_1kp__r.Id){
                                console.log(visit.records[j].Id);
                            }
                        }
                    }
                }

            }
            
            function arrayMin(arrs,index){
                var min=Math.min(...arrs);
                if(!min){
                    index=arrs.indexOf(0);
                    arrs[index]=999999;
                    min=Math.min(...arrs);
                    index=arrs.indexOf(min);
                    return min;
                }else{
                    index=arrs.indexOf(min);
                    return min;
                }
            }
            
            function fixlocationIndex(matrix){
                
                var indexarr=[];
                var x=matrix.length;
                var newarry=matrix[x-1].slice();
                newarry.sort(function (a,b){return a-b;});
                for(var i=0; i<matrix[x-1].length;i++){
                    if(i){
                        var element=newarry[i];
                        var index=matrix[x-1].indexOf(element);
                        indexarr.push(index);            
                    }
                }
                return indexarr;
            }
            //send your resource location with different location to Mapquest
            
            
            //timeMatrix and resourceData and visitData is array for different territory
            function groupLocation(visit){
                
                var sameLocation={};
                for(var i=0;i<visit.size;i++){
                    var location=visit.records[i].STKR__Account_lkp__r.Id;
                    if(!sameLocation[location]){
                        sameLocation[location]=[];
                    }
                    sameLocation[location].push(i);
                }
                return sameLocation
            }
            
            function seperatevisit(visit){
                var geolocation={};
                
                for(var i=0;i<visit.size;i++){
                    var latitude=visit.records[i].STKR__Account_lkp__r.STKR__location__Latitude__s;
                    var location=visit.records[i].STKR__Account_lkp__r.Id;
                    var longitude=visit.records[i].STKR__Account_lkp__r.STKR__location__Longitude__s ;
                    
                    if(!geolocation[location]){
                        geolocation[location]=[];
                    }
                    geolocation[location]=[latitude,longitude];
                }
                return geolocation;
            }
            
            function seperateFixVisit(visit){
                console.log("sepertefixvisit");
                var seperateFixVisit={};
                for(var i=0; i<visit.size;i++){
                    var fixvist=visit.records[i].STKR__Fixed_Visit__c;
                    if(fixvist=="true"){
                        seperateFixVisit[i]=[visit.records[i].STKR__Due_Date__c,visit.records[i].STKR__Due_Finish__c,visit.records[i].STKR__Service__r.STKR__Time_Allocation__c];
                    }
                }
                return seperateFixVisit;
            }
            
            function fixvisitDays(rawdata,resource,fixvisit,days,sortlocation,week){
            	console.log("fixvisitdays");
                console.log(fixvisit);
                console.log(days);
                console.log(sortlocation);
                console.log(week);
                console.log(rawdata);
               
                console.log(resource);
                //deal with fixvist
                for(var i in fixvisit){
                    for(var j=0;j<fixvisit[i].length;j++){
                        console.log(fixvisit[i][j]);
                        var tem=new Date(fixvisit[i][j]);
                        console.log(tem);
                        console.log(tem.getMonth());
                    }
                    
                }
                
                var fromday=new Date(rawdata[0].value);
                
                var result={};
                
                if(days>getvisitNumber(sortlocation)){
                    alert("sorry your visit is less, can not route optimisation");
                }else{
                    for(var j=1;j<=days;j++){
                        var tem=j+','+resource[starttime];
                        
                        result[tem]=[];
                        week[j]=addDays(fromday,j);
                    }
                }
                
                return result;

            }
            

            
            function isEmpty(obj) {
                for(var key in obj) {
                    if(obj.hasOwnProperty(key))
                        return false;
                }
                return true;
            }
            
            function locationToVisit(index,locationId,sameList){
                var locationsort={};
                for(var i=0;i<index.length;i++){
                    var location=locationId[index[i]];
                    if(!locationsort[location]){
                        locationsort[location]=[];
                    }
                    locationsort[location].push(sameList[locationId[index[i]]]);
                }
                
                return locationsort;
            }
            
            function getvisitNumber(sortlocation){
                var visitnumber=0;
                for(a in sortlocation){
                    visitnumber=visitnumber+sortlocation[a][0].length;
                }
                return visitnumber;
            }
            
            //calculate the day+day
            function addDays(date, days) {
                var result = new Date(date);
                result.setDate(result.getDate() + days);
                return result;
            }
            
            function generateDay(rawdata,days,sortlocation,week){
                var fromday=new Date(rawdata[0].value);
                
                var result={};
                
                if(days>getvisitNumber(sortlocation)){
                    alert("sorry your visit is less, can not route optimisation");
                }else{
                    for(var j=1;j<=days;j++){
                        result[addDays(fromday,j)]=[];
                        week[j]=addDays(fromday,j);
                    }
                }
                return result;
            }
            
            function generateresource(resource){
                
                var result={};
                result.id=resource.records.Id;
                result.name=resource.records.Name;
                result.starttime=resource.records.STKR__StartOfDay__c;
                result.endtime=resource.records.STKR__EndOfDay__c;
                result.workhour=resource.records.STKR__Working_Hours__c*60;
                result.lunch=resource.records.STKR__Lunch_Break_Minutes__c*60;
                result.workday=resource.records.WorkingDay__c;
                return result;
                
            }
            
            function optimisation(arguments,resourGroup,rawData,sameList,sameLocationId,fixVisit,resourceData,visitData){ 
                console.log("this is my fixvisit");
                console.log(fixVisit);
                var days = Math.round(Math.abs((new Date(rawData[1].value).getTime()-new Date(rawData[0].value).getTime())/(24*60*60*1000)));
                var output={};
                for(var i=0;i<resourGroup.length;i++){
                        
                    if(isEmpty(fixVisit[i])){
                        if(arguments[i][0].time==null){
                        alert("Please check your visit, we can not find location");
                        }
                        
                        var matrixfix=arguments[i][0].time[arguments[i][0].length-1];
                        var index=fixlocationIndex(arguments[i][0].time);
                        console.log(index);
                        var sortlocation=locationToVisit(index,sameLocationId[i],sameList[i]);
                        console.log(sortlocation);
                        var week={};
                        var result=generateDay(rawData,days,sortlocation,week);
                        console.log(week);
                        var resource=generateresource(resourceData[i]);
                        console.log(result);
                        var workingTime={};
                        var optimisationList=moveVisit(arguments[i][0].time,sameLocationId[i],sameList[i],visitData[i],sortlocation,result,resource,week,workingTime);
                        //moveVisitLast(arguments[i][0].time,optimisationList,sameLocationId[i],sameList[i],visitData[i],resource,week,workingTime);
                        //console.log(optimisationList);
                        
                        console.log(resource);
                        output[resource.id]=optimisationList;
                    }else{
                        console.log("this is fixvisit");
                        var matrixfix=arguments[i][0].time[arguments[i][0].length-1];
                        var index=fixlocationIndex(arguments[i][0].time);
                        console.log(index);
                        var sortlocation=locationToVisit(index,sameLocationId[i],sameList[i]);
                        console.log(sortlocation);
                        var week={};
                        var resource=generateresource(resourceData[i]);
                        var result=fixvisitDays(rawData,resource,fixVisit[i],days,sortlocation,week);
                        var result=generateDay(rawData,days,sortlocation,week);

                        


                    }
                }
                
                console.log(output);
                return output;
            }
            
            function isInteger(obj){
                return typeof obj === 'number' && obj%1 === 0;                
            }

            function moveVisitLast(matrix,result,locationId,sameLocation,visit,resource,week,workingTime){
                console.log("this is my time matrix");
                //console.log(matrix);
                //console.log(result);
                //console.log(locationId);
                //console.log(sameLocation);

                //generateObjMatrix(matrix,locationId);
                //return 0;
                
                var fixlocationRow=matrix.length-1;
                locationId.splice(fixlocationRow,1);
                matrix.splice(fixlocationRow,1);
                for(var i=0;i<matrix.length;i++){
                	matrix[i].splice(fixlocationRow,1);
                }
                var halfdaywork={};
                var fulldaywork={};
                for(var i in result){
                    if(result[i].length==1){
                        halfdaywork[i]=result[i];
                    }else{
                        fulldaywork[i]=result[i];
                        
                    }
                    
                }
                for(var i in fulldaywork){
                    middleInsert(fulldaywork[i],matrix,sameLocation,locationId,result,visit,resource,week);
                    
                }
                for(var i in halfdaywork){
                
                }
                
                moveVisitLast(matrix,result,locationId,sameLocation,visit,resource,week,workingTime);
            }
            
            //find the key index based on even number or odd number
            function keyIndex(resulti){
                if(resulti.length % 2==0){
                    return resulti.length/2;
                }else{
                    return Math.floor(resulti.length/2);
                }
            	
            }
            
            function middleInsert(resulti,matrix,sameLocation,locationId,result,visit,resource,week){
                console.log(resulti);
                console.log(result);
                console.log(week);
                console.log(sameLocation);
                console.log(locationId);
                console.log(resulti[resulti.length/2-1]);
                var key1=getKeyByValue(sameLocation,resulti[keyIndex(resulti)]);
                console.log(keyIndex(resulti));
                console.log(resulti[keyIndex(resulti)]);
                console.log(key1);
                var index=getKeyByValue(locationId,key1);
                console.log(index);
                console.log(matrix[index]);
                var temarr=matrix[index].slice();
                temarr.sort();
                console.log(temarr);
                console.log(matrix[index]);
                var inputvisit=[];
                for(var i in result){
                    for(var j in result[i]){
                        inputvisit.push(result[i][j]);
                    }
                }
                console.log(inputvisit);
                console.log(temarr);
                for(var j=1;j<temarr.length;j++){
                    var control=false;
                    var temvist=sameLocation[locationId[matrix[index].indexOf(temarr[j])]];
                    console.log(temvist);
                    for(var i=0;i<temvist.length;i++){
                        if(checkmove(result,resulti,temvist[i],visit,inputvisit,resource)){
                            
                            console.log("insert the data");
                            resulti.splice(resulti.length/2,0,temvist[i]);
                            control=true;
                            //temvist.splice(temvist.indexOf(temvist[i]),1);
                            break;
                        }
                    }
                    if(control==true){
                        break;
                    }
                }                
                console.log(resulti);
            }
            

            
            
            
            function moveVisit(matrix,locationId,sameLocation,visit,sortlocation,result,resource,week,workingTime){
                var visitarr=[];
                console.log(result);
                console.log(visit);
                console.log("this is matrix");
                var newArray = matrix.map(function(arr) {
                    return arr.slice();
                });
                console.log(newArray);

                
                var visitCopy=visit.records.slice();
                //sortlocation to one dementional array
                
                for(var a in sortlocation){
                    for(var b=0;b<sortlocation[a][0].length;b++){
                        visitarr.push(sortlocation[a][0][b]);
                    }
                }
                //console.log(matrix);
                //console.log(visitarr.reverse());
                var control=1;
                var inputvisit=[];
                var temarr=matrix[matrix.length-1].slice();
                
                temarr=temarr.sort(function (a,b){return a-b;});
                console.log(temarr);
                console.log(matrix);
                var flag;
                for(var b=0;b<2;b++){
                    flag=1;
                    for(var a in result){
                        
                        for(var i=1;i<temarr.length;i++){
                            control=false;
                            var visitarry=sameLocation[locationId[matrix[matrix.length-1].indexOf(temarr[i])]];
                            console.log(visitarry);
                            for(var j=0;j<visitarry.length;j++){
                                if(checkmove(result,result[a],visitarry[j],visit,inputvisit,resource)){
                                    
                                    result[a].splice(flag,0,visitarry[j]);
                                    control=true;
                                    inputvisit.push(visitarry[j]);
                                    visitCopy.splice(visitCopy.indexOf(visitarry[j]),1);
                                    break;
                                }
                            }
                            if(control==true){
                                break;
                            }
                            
                        }
                    }
                    flag=-1;                   
                }
                
                console.log(visitCopy);
                var numberVisit;
                var nummatrix=matrix.length-1
                console.log(matrix.length);
                matrix.splice(nummatrix,1);
                for(var i=0;i<matrix.length;i++){
                	matrix[i].splice(nummatrix,1);
                }
                
                do{
                    var oddGiven=true;
                    var increase=0;
                    
                    numberVisit=visitCopy.length;
                    for(var a in result){
                        
                        
                        var visitkey=result[a][keyIndex(result[a])];
                        var targetmatrix=matrix[getKeyByValue(locationId,getKeyByValue(sameLocation,visitkey))];
                        var temarr=targetmatrix.slice();
                        temarr=temarr.sort(function (a,b){return a-b;});
                        //console.log(targetmatrix);
                        //console.log(temarr);
                        for(var i=1;i<temarr.length;i++){
                            control=false;
                            
                            //console.log(temarr[i]);
                            //console.log(targetmatrix);
                            var visitarry=sameLocation[locationId[targetmatrix.indexOf(temarr[i])]];
                            //console.log(visitarry);
                            for(var j=0;j<visitarry.length;j++){
                                if(checkmove(result,result[a],visitarry[j],visit,inputvisit,resource)){
                                    console.log(keyIndex(result[a]));
                                    result[a].splice(keyIndex(result[a]),0,visitarry[j]);
                                    control=true;
                                    inputvisit.push(visitarry[j]);
                                    visitCopy.splice(visitCopy.indexOf(visitarry[j]),1);
                                    break;
                                }
                            }
                          
                            
                        }
                        
                        
                        if(numberVisit==visitCopy.length){
                            break;
                        }
                    }
                }while(visitCopy>0);
                
                
                
                
                console.log(visitCopy);
                
                return result;
            }
            
            function getTimeMatrix(result,matrix,visit){
                for(var i in result){
                    result[i]
                }
            }

            // function for check if it can be moved
            function checkmove(result,checkvisit,visitarr,visit,inputvisit,resource,week,weeks,workingTime){
                
                //console.log(checkvisit);
                //console.log(inputvisit);
                //console.log(week);
                //the first one
                //console.log(resource);
                //console.log(workingTime);
                
                var date1=resource.starttime;
                var date2=resource.endtime;
                
                //console.log(diff(date1,date2));
                
                
                
                if(!inputvisit.length){
                    return true;
                }
                

                //weekly visit limit (next week,next next week)
                if (visit.records[visitarr].STKR__Service__r.STKR__Frequency__c=="Weekly"){
                    for(var i=0;i<inputvisit.length;i++){
                        //console.log("check the Id is same first:"+visit.records[inputvisit[i]].STKR__Service__r.Id);
                        //console.log("check the 2 Id: "+visit.records[visitarr].STKR__Service__r.Id);
                        if (visit.records[inputvisit[i]].STKR__Service__r.Id==visit.records[visitarr].STKR__Service__r.Id){
                            //console.log(result);
                            //console.log(visitarr);
                            //console.log(inputvisit[i]);
                            var key1=getKeyByValue(result,inputvisit[i]);
                            var key2=getKeyByValue(result,inputvisit[inputvisit.length-2]);
                            key2=key2+1;
                            var tem=Math.round(7/visit.records[visitarr].STKR__Service__r.STKR__Service_Interval__c);
                            if(Math.abs(key2-key1)<tem || Math.abs(key2-key1)>tem*2){
                                return false;
                            }
                        }
                    }
                }
                
                if(inputvisit.indexOf(visitarr)!=-1){
                	return false;
                }
                //daily  not allow same schedual in same day
                if(visit.records[visitarr].STKR__Service__r.STKR__Frequency__c=="Daily"){
                    if(!checkvisit.length){
                        return true;
                    }
                    for(var i=0; i<checkvisit.length;i++){
                        if (visit.records[checkvisit[i]].STKR__Service__r.Id==visit.records[visitarr].STKR__Service__r.Id){
                            return false;
                        }
                    }
                    
                }
                
                
                return true;
            }
            

            
            function getKeyByValue(object, value) {
                for(var key in object){
                    //console.log(object[key]);
                    //console.log(object[key].indexOf(value));
                    if(object[key].indexOf(value)!=-1){
                        //console.log(object[key]);
                        //console.log(value);
                        return key;}
                }
                
            }
            /*
            this function is for get value for rawdata. we get data from user's input, processing data function
            input ： rawdata --form data from users'input
            output: get resource
            */
            function valueForm (rawdata){
                var resource=[];
                for (i=0;i<rawdata.length;i++){
                    if (rawdata[i].name=="resource"){
                        resource.push("'"+rawdata[i].value+"'");
                    }
                }
                return resource;
            }
            /*
            send request from getting resource
            input: rawdata --form data from users'input
            output: result for resource request
            */
            function requestResource(rawdata){
                var result=[];
                var resource=valueForm(rawdata);
                for(var i in resource){
                    var query="select Id,Name,WorkingDay__c,STKR__StartOfDay__c,STKR__Lunch_Break_Minutes__c, STKR__Expiry_Date__c, STKR__EndOfDay__c, STKR__Working_Hours__c,STKR__Fixed_Location__longitude__s,STKR__Fixed_Location__latitude__s from STKR__Resource__c where Id in ("+resource[i]+")";
                    try{
                        sforce.connection.sessionId="{!$Api.Session_ID}";
                        var queryResult=sforce.connection.query(query);
                        result.push(queryResult);
                    }catch(error)
                    {
                        console.log(error);
                    }
                }
                return result;
            }
            /*send request for getting visit data
            input: rawdata --form data from users'input
            output: result for visit data
            */
            //input: the raw data output: filter data using Query
            function requestToSforce(data){
                var resource=valueForm(data);
                // query to find the lantitude and longtitude
                //best way is use one request get multiple resources and territories.
                var result=[];
                for(var i in resource){
                    var query="SELECT Id,Name,STKR__Site_Post_Code__c,STKR__Service__r.STKR__Service_Interval__c,STKR__Days_Overdue__c,STKR__Account_lkp__r.Id,STKR__Service__r.Id,STKR__Fixed_Visit__c, STKR__Service__r.STKR__Last_Scheduled_Visit__c,STKR__Service__r.STKR__Frequency__c, STKR__Service__r.STKR__Contract_End_Date__c,STKR__Service__r.STKR__Fix_all_Visits__c, STKR__Due_Date__c, STKR__Due_Finish__c, STKR__Service__r.STKR__Time_Allocation__c, STKR__Service__r.STKR__Service_Owner__c, STKR__Account_lkp__r.STKR__Location__longitude__s, STKR__Account_lkp__r.STKR__Location__latitude__s from STKR__Visit__c where STKR__Service__r.STKR__Service_Owner__c in ("+resource[i]+") and STKR__Planned_Date__c< "+data[1].value+"T00:00:00.000+0000 and STKR__Planned_Date__c> "+data[0].value+"T00:00:00.000+0000";
                    try{
                        sforce.connection.sessionId="{!$Api.Session_ID}";
                        var queryResult=sforce.connection.query(query);
                        result.push(queryResult);
                    }catch(error)
                    {
                        console.log(error);
                    }
                }
                return result;
            }
            
            /*
            generate Json for sending request to mapquest
            input: 
            output:  Json file
            */
            function generateMapJson(result,sameLocationId){
                var mappingJsonList=[];
                var mappingJson={};
                var locations=[];
                mappingJson.locations=locations;
                var accountLocationtem=[];
                values=Object.keys(result).map(key => result[key]);
                keysSorted=Object.keys(result);
                sameLocationId.push(keysSorted);
                for(var i=0;i<values.length;i++){
                    var latLng=Number(values[i][0])+","+Number(values[i][1]);
                    mappingJson.locations.push(latLng);
                }
                mappingJson.options={};
                mappingJson.options={"allToAll":true};
                return JSON.stringify(mappingJson);
            }
            
            </script>
            
        </head>
        <body>
            <apex:pageBlock title="Route Optimisation">
                
                <form id="matrixForm">
                    <div id="date_container">
                        
                        <div>
                            <label>From Date </label>
                            <input type="date" id="fromDate" name="formDate"/>    
                        </div>
                        <div style='width: 30%;'></div>
                        
                        <div style='float:left;'>
                            <label>To Date</label>
                            <input type="date" id="toDate" name="toDate"/>    
                        </div>
                    </div>
                    
                    
                    <div id="resource">
                        
                    </div>
                    
                    
                    <div id="territory">
                        
                    </div>
                    <div>
                        <input type="submit" onclick="submit;" value="Route Optimisation"/>    
                    </div>
                    
                    
                </form>
                <hr />
                <div class="body" id="result">
                    <div id="territoryButton" class="header">
                    </div>
                    
                    <div class="container">
                        
                        <div id="dayresult" class="left">
                            
                        </div>    
                        <div class="right"></div>
                        <div class="main">
                            <div id="map" style="width: 100%; height: 600px;"></div>
                        </div>
                    </div>
                    
                    <div class="footer"></div>
                </div>
            </apex:pageBlock>
        </body>
    </html>
</apex:page>