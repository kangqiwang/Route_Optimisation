<apex:page controller="STKR.AccountList" showHeader="false" sidebar="false">
    <html>
    <apex:variable var="bs" value="1" rendered="{!mappingSettings.STKR__Mapquest_API_Key__c == ''}">

    No mapquest API key available. If you wish to use this feature please contact ServiceTracker.

    </apex:variable>
    
    <apex:variable var="bs" value="1" rendered="{!mappingSettings.STKR__Mapquest_API_Key__c <> ''}">
    <head>
        <title>Nearest Tech</title>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/leaflet.css" />
        <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/leaflet.js"></script>
        <script src="https://www.mapquestapi.com/sdk/leaflet/v2.2/mq-map.js?key={!$Setup.STKR__nearestTechSettings__c.STKR__Mapquest_API_Key__c}"></script>
        <script src="https://www.mapquestapi.com/sdk/leaflet/v2.2/mq-traffic.js?key={!$Setup.STKR__nearestTechSettings__c.STKR__Mapquest_API_Key__c}"></script>
        <script type="text/javascript">
            var __sfdcSessionId = '{!GETSESSIONID()}';
        </script>
        <script src="../../soap/ajax/39.0/connection.js" type="text/javascript"></script>

        <style>
        html, body{
            height: 100vh;
        }
        body {
          display: flex;
          flex-direction: column;
          overflow-y: hidden;
        }        
        #map {
            display: flex;
            //clear: both;
            width: 100%;
            flex:1;        

        }
        #availability{
            height: 30px;
            transform: translate3d(0,0,0);
            transition: .3s;  
            background: #d7ecf2;
            font-weight: bold;      
        }
        #availability.isOpen {
          
          background: #d7ecf2;
          height:85vh;
          overflow: scroll;
        }   
        #toggleBox{
         background: #d7ecf2;   
         text-align: center;
         font-size: 14px;
         cursor: pointer; 
         cursor: hand;
        }     
        table {
            width: 100%;
            background: #d7ecf2;
        }
        td {
            width: 25%;
        }
        tr:nth-child(even) {
            background: #e3e6ef;
        }
        tr:nth-child(odd) {
            background: #f8f8f8;
        } 
        .tableHeading{
            background: #d7ecf2;
            font-weight: bold;
        }       
        </style>
        <script type="text/javascript">
        var resourceMap;
        var originLat = "";
        var originLng = "";
        var resourceData;
        var visitData;
        var resources = [];
        var visits = [];
        var schedules = {};
        var geocodeComplete = false;
        
                    //icons for Map
                    var houseIcon = L.icon({
                        iconUrl: '{!URLFOR($Resource.mappingIcons,'mapHouse.png')}',
                        iconRetinaUrl: '{!URLFOR($Resource.mappingIcons,'mapHouse.png')}',
                        iconSize: [52, 46],
                        iconAnchor: [19, 46],
                        popupAnchor: [5, -45],
                    });
                    var redVan = L.icon({
                        iconUrl: '{!URLFOR($Resource.mappingIcons,'mapVan.png')}',
                        iconRetinaUrl: '{!URLFOR($Resource.mappingIcons,'mapVan.png')}',
                        iconSize: [55, 46],
                        iconAnchor: [20, 15],
                        popupAnchor: [0, -15],
                    });
                    var amberVan = L.icon({
                        iconUrl: '{!URLFOR($Resource.mappingIcons,'mapVan.png')}',
                        iconRetinaUrl: '{!URLFOR($Resource.mappingIcons,'mapVan.png')}',
                        iconSize: [55, 46],
                        iconAnchor: [20, 15],
                        popupAnchor: [0, -15],
                    });
                    var greenVan = L.icon({
                        iconUrl: '{!URLFOR($Resource.mappingIcons,'mapVan.png')}',
                        iconRetinaUrl: '{!URLFOR($Resource.mappingIcons,'mapVan.png')}',
                        iconSize: [55, 46],
                        iconAnchor: [20, 15],
                        popupAnchor: [0, -15],
                    });
                    var visitIcon = L.icon({
                        iconUrl: '{!URLFOR($Resource.mappingIcons,'mapVisit.png')}',
                        iconRetinaUrl: '{!URLFOR($Resource.mappingIcons,'mapVisit.png')}',
                        iconSize: [40, 50],
                        iconAnchor: [20, 15],
                        popupAnchor: [0, -15],
                    });        

        $(document).ready(function() {
        
        
        //go grab the next 14 days of jobs...
        <apex:repeat value="{!scheduleData}" var="summary">
            var scheduleInfo = {
                                key: '{!summary.Name}',
                                workingTime: {!summary.Quantity}, 
                                eventTime: 0,
                                travelTime: 0,
                                date: '{!summary.Name}'.substring('{!summary.Name}'.length - 10),
                                resourceID: '{!summary.Name}'.substring(0,'{!summary.Name}'.length - 10),
                                locations: ''
                               };
                               schedules["{!summary.Name}"] = scheduleInfo;
        </apex:repeat>  
        
        //repeat the trick for events and add the time to the javascript schedules object.
        <apex:repeat value="{!eventData}" var="eventSummary">
            //find the relevant entry and add the event time from the query
            if ("{!eventSummary.Name}" in schedules){
                schedules["{!eventSummary.Name}"].eventTime = {!eventSummary.Quantity};
            }

        </apex:repeat>          

            // Attach a submit handler to the form
            $("#matrixForm").submit(function(event) {
            $('#availablityResults').empty()

                var jsonData = {};

                // Stop form from submitting normally
                event.preventDefault();

                if (resourceMap !== null && resourceMap !== undefined) {
                    resourceMap.remove();
                }

                var geocodingURL = "https://www.mapquestapi.com/geocoding/v1/address?key={!$Setup.nearestTechSettings__c.Mapquest_API_Key__c}&location=" + $("#location").val();

                //geocode origin of callout
                $.ajax({
                    url: geocodingURL,
                    dataType: 'jsonp',
                    crossDomain: true,
                    contentType: 'json',
                    success: function(data) {
                        //set origin lat lng
                        originLat = data.results[0].locations[0].latLng.lat;
                        originLng = data.results[0].locations[0].latLng.lng;
                        getRouteMatrix(data);
                        updateAvailability();

                    },
                    error: function(data) {
                        console.log('error occurred on initial geocoding - ' + data)
                        console.log("broken: " + geocodingURL);
                    },


                });
                //end of geocode block 
                 
                
                //console.log(JSON.stringify(schedules));               
                
            });    
            
            //use visualForce Apex:repeat to add each resource to resources object.
            <apex:repeat value="{!objResources }" var="resource" id="resources">            
                //add resource to the Javascript object array
                    if (getDistanceFromLatLon(54.00, 2.00,{!resource.STKR__Location__Latitude__s},{!resource.STKR__Location__Longitude__s}) < 600){
                    var resource = {
                        name : '{!resource.name}',
                        id: '{!resource.id}',
                        workingHours: '{!resource.STKR__Working_Hours__c}',
                        location : '{!resource.STKR__Location__Latitude__s},{!resource.STKR__Location__Longitude__s}',
                        fixedLocation: '{!resource.STKR__Fixed_Location__Latitude__s},{!resource.STKR__Fixed_Location__Longitude__s}'
                        
                    };
                    if({!resource.STKR__Location__Latitude__s} != ''){//don't add the resource if there's no current location
                        resources.push(resource);
                    }   
                }           
            </apex:repeat>
            
            
            //now find the traveling time for each tech per day. use the schedules object to seed this
            for (var sched in schedules){
                if (schedules.hasOwnProperty(sched)) {
                     getTravelTime(schedules[sched].key);
                }
            }  
            
            $('#toggleBox').on('click', function() {
              $('#availability').toggleClass('isOpen');
            });
                                  
        });
        

        //main functions
        
        function updateAvailability(){
                //populate table of engineer availabilty
                var html = '<tr class="tableHeading"><td class="tableHeading">Date</td><td class="tableHeading">Engineer</td><td class="tableHeading">Hours Available</td><td class="tableHeading">Nearest Call (Miles)</td></tr>';
                for (var sched in schedules){
                    if (schedules.hasOwnProperty(sched)) {
                        var resource;
                        for (var i = 0 ; i < resources.length ; i++){
                            if(schedules[sched].resourceID == resources[i].id){
                                resource = resources[i];
                            }
                        }  
                        var hoursAvailable = (((resource.workingHours * 60) - (schedules[sched].workingTime + schedules[sched].eventTime + schedules[sched].travelTime))/60).toFixed(2);   
                        if(hoursAvailable < 0) {hoursAvailable = 0;}                
                        var nearestCall = nearestDistanceToCallOut(originLat, originLng, schedules[sched].locations);
                        html += '<tr>'; 
                        html += '<td>' + schedules[sched].date + '</td>';
                        html += '<td>' + resource.name + '</td>';
                        html += '<td>' + hoursAvailable + '</td>';
                        html += '<td> ' + nearestCall + ' </td>';                            
                        html += '</tr>';
                        
                    }
                } 
                $('#availablityResults').append(html);        
        }        
        
        function getTravelTime(shceduleID){
            try{ 
            var mappingJson = '';
            var fixedLocation = '';
            var valid = false;
            var query = "SELECT STKR__Resource__c , STKR__Account_lkp__r.STKR__Location__Latitude__s,STKR__Account_lkp__r.STKR__Location__Longitude__s from STKR__Visit__c where STKR__Account_lkp__r.STKR__Location__Latitude__s <> null AND STKR__Status__c != 'Complete' AND day_only(STKR__Due_Date__c) = " + schedules[shceduleID].date  + " AND STKR__Resource__c = '" + schedules[shceduleID].resourceID + "'"; 
            var records = sforce.connection.query(query); 
            var records1 = records.getArray('records'); 
            
            mappingJson += '{locations: ['
            //add fixed position in position zero
            for (var i = 0 ; i < resources.length ; i++){
                if(schedules[shceduleID].resourceID == resources[i].id){
                    fixedLocation = '"' + resources[i].fixedLocation+ '",';
                    mappingJson += fixedLocation;                    
                    valid = true;
                }
            }                    
            
            for(var i=0;i<records1.length;i++){ 
                mappingJson += '"' + records1[i].STKR__Account_lkp__r.STKR__location__Latitude__s + ',' + records1[i].STKR__Account_lkp__r.STKR__location__Longitude__s+'",';
            } 
            
            //add fixed location onto end (assume travel time is included in working day)
            mappingJson += fixedLocation;
            
            mappingJson = mappingJson.slice(0, -1);
            mappingJson += String(']}'); 
            
            //store in schedule object for later.
            schedules[shceduleID].locations = mappingJson;  
                                                     
            
            if (valid){
            
                $.ajax({
                    url: "https://www.mapquestapi.com/directions/v2/optimizedroute",
                    dataType: 'jsonp',
                    crossDomain: true,
                    contentType: 'json',
                    data: {
                        key: decodeURI("{!$Setup.nearestTechSettings__c.Mapquest_API_Key__c}"),
                        json: mappingJson
                    },
                    success: function(data){
                        //sum up the travel time and add it to the schedule object. 
                        schedules[shceduleID].travelTime = (data.route.time / 60);
                    }, 
                    error: function(data) {
                        console.log('error occurred - ' + mappingJson + ' - ' + data)
                    }
                });                        
                    
            }
        
        }
        catch(e){ 
            alert('An Error has Occured. Error:' +e); 
        }         
        }
        
        function getRouteMatrix(data) {        
            
            var mappingJson = '';
            mappingJson += '{locations: ['
                //add callOut in position zero
            mappingJson += '"' + originLat + ',' + originLng + '",';
            //use visualForce Apex:repeat to add each resource.
            <apex:repeat value="{!objResources }" var="resource" id="resourcesForMatrix">
                if (getDistanceFromLatLon(originLat, originLng, {!resource.Location__Latitude__s
                    }, {!resource.Location__Longitude__s
                    }) < 100) {
                    mappingJson += '"{!resource.Location__Latitude__s},{!resource.Location__Longitude__s}",';                  
                }

            </apex:repeat>

            mappingJson = mappingJson.slice(0, -1);
            mappingJson += String(']}');

            //$("#json").empty().append(mappingJson + '<br/>');

            $.ajax({
                url: "https://www.mapquestapi.com/directions/v2/routematrix",
                dataType: 'jsonp',
                crossDomain: true,
                contentType: 'json',
                data: {
                    key: decodeURI("{!$Setup.nearestTechSettings__c.Mapquest_API_Key__c}"),
                    json: mappingJson
                },
                success: renderMap, 
                error: function(data) {
                    console.log('error occurred - ' + mappingJson + ' - ' + data)
                }
            });
        }

        function renderMap(data) {
        
                    //$("#response").empty().append(JSON.stringify(data));
                    var locIndex = indexOfMinPostiveValue(data.distance);
                    $("#result").empty().append("<b>Nearest engineer is : " + resources[locIndex-1].name + ", currently at " +
                        data.locations[locIndex].postalCode + "<b/>(" + data.distance[locIndex].toFixed(2) + " Miles / " + (data.time[locIndex] / 60).toFixed(2) + " minutes away)");
                    //map - var name resourceMap
                    resourceMap = L.map('map', {
                        layers: MQ.mapLayer(),
                        center: [data.locations[locIndex].latLng.lat, data.locations[locIndex].latLng.lng],
                        zoom: 10
                    });


                    var nearestMarker;
                    var resourceArray = [];
                    //iterate through the resources.                                                 
                    for (i = 0; i < data.locations.length; i++) {

                        //deal with text for pop ups, set icons
                        var popUpText;
                        var pop = false;
    
                        if (data.distance[i] < {!$Setup.nearestTechSettings__c.techRadius__c}){//if the resource is within {!$Setup.nearestTechSettings__c.techRadius__c} miles
                            if (i == 0) {
                                popUpText = 'Call Out '
                                mapIcon = houseIcon
                            } else if (i == locIndex) {
                                mapIcon = greenVan
                                pop = true
                                popUpText = 'Nearest Tech - ' + resources[i-1].name + "<br/>" + data.distance[i].toFixed(2) + " Miles <br/> " + (data.time[i] / 60).toFixed(2) + " minutes away"
    
                            } else {
                                mapIcon = redVan
                                popUpText = resources[i-1].name + "<br/>" + data.distance[i].toFixed(2) + " Miles <br/> " + (data.time[i] / 60).toFixed(2) + " minutes away"
                            }
                            //circles - if a van falls within {!$Setup.nearestTechSettings__c.blueRingRadius__c} miles
                            if (i != 0 && data.distance[i] < {!$Setup.nearestTechSettings__c.blueRingRadius__c}) {
                                if (i != locIndex) { //update the icon to amber if it's not the nearest
                                    mapIcon = amberVan
                                }
                                resourceArray.push(L.circle([data.locations[i].latLng.lat, data.locations[i].latLng.lng], {!$Setup.nearestTechSettings__c.blueRingRadius__c} * 1609.344));
                            }
    
                            //add the marker to the map
                            var marker = L.marker([data.locations[i].latLng.lat, data.locations[i].latLng.lng], {
                                    icon: mapIcon
                                })
                                .bindPopup(popUpText)
    
                            if (pop) {
                                //if it's the nearest marker activate the pop up. 
                                marker.openPopup();
                                nearestMarker = marker;
                            }
    
                            resourceArray.push(marker);
                        }
                    }

                    var resourceGroup = L.featureGroup(resourceArray).addTo(resourceMap);
                    nearestMarker.openPopup();
                    resourceMap.fitBounds(resourceGroup.getBounds());

                    plotVisits();
                }
                
        function plotVisits(){

            var mappingJson = '';    
            var visitCount = 0;   
            mappingJson += '{locations: ['
                //add callOut in position zero
            mappingJson += '"' + originLat + ',' + originLng + '",';
            //use visualForce Apex:repeat to add each visit.
            <apex:repeat value="{!objAllVisits}" var="visit" id="allVisitsPlot">
                if (getDistanceFromLatLon(originLat, originLng, {!visit.STKR__Account_lkp__r.location__Latitude__s
                }, {!visit.STKR__Account_lkp__r.location__Longitude__s
                }) < 100) {
                    mappingJson += '"{!visit.STKR__Account_lkp__r.location__Latitude__s},{!visit.STKR__Account_lkp__r.location__Longitude__s}",';
                    
                    //add resource to the Javascript object array
                    var visit= {
                        name : '{!JSENCODE(visit.name)}',
                        location : '{!visit.STKR__Account_lkp__r.location__Latitude__s},{!visit.STKR__Account_lkp__r.location__Longitude__s}',
                        resourceName: '{!JSENCODE(visit.Resource_Name__c)}',
                        dueDate: '{!visit.due_Date__c}',
                        status: '{!JSENCODE(visit.STKR__Status__c)}',
                        duration: '{!visit.time_allocation__c}',
                        siteName: '{!JSENCODE(visit.STKR__Account_Lkp__r.Name)}'
                    };
                    visits.push(visit);  
                    visitCount ++;                  
                }

            </apex:repeat>    

            mappingJson = mappingJson.slice(0, -1);
            mappingJson += String(']}');

            console.log('plotting ' + visitCount + ' visits');

            if (visitCount > 0){
                //get the route matrix info for the visits. 
                $.ajax({
                    url: "https://www.mapquestapi.com/directions/v2/routematrix",
                    dataType: 'jsonp',
                    crossDomain: true,
                    contentType: 'json',
                    data: {
                        key: decodeURI("{!$Setup.nearestTechSettings__c.Mapquest_API_Key__c}"),
                        json: mappingJson
                    },
                    success: function(data){

                        console.log('visit data - ' + mappingJson + ' - ' + JSON.stringify(data))
                        
                        // now grab the visits and create markers 
                        for (i = 1; i < data.locations.length; i++) {//start at 1 as we don't need the call out location data. 
                            var visitsArray = [];  
                            marker = new L.marker([data.locations[i].latLng.lat, data.locations[i].latLng.lng],
                                                   {icon: visitIcon})
                                                   .bindPopup(visits[i-1].resourceName + " - " + visits[i-1].siteName + "<br/>" +  visits[i-1].status + "<br/>" +  visits[i-1].dueDate + "<br/>Duration " + visits[i-1].duration + " mins<br/> " + data.distance[i].toFixed(2) + " Miles <br/> " + (data.time[i] / 60).toFixed(2) + " minutes away");
    
                            visitsArray.push(marker);
                            
                            var group = L.featureGroup(visitsArray).addTo(resourceMap);                        
                            
                        }  
                    }, 
                    error: function(data) {
                        console.log('error occurred - ' + mappingJson + ' - ' + data)
                    }
                });                
            }
        
        }


        //utility methods
        
        function nearestDistanceToCallOut(callOutLat, callOutLng, locations){
            
            var retVal = 9999999;
            var dist = 0;
            //squish extra bits to store lat,lng in schedule.locations 
            tmpLocation = locations.replace('{locations: ["','' );
            tmpLocation = tmpLocation .replace(/"/g,'');
            tmpLocation = tmpLocation .replace(']}','');   
            
            //console.log('tmpLocation is ' + tmpLocation);
            
            //spin through ignoring first and last. (tech's base location)
            var locs = tmpLocation.split(",");  
            console.log('locs has '+ locs.length);
            for (var i = 2; i < (locs.length -2) ; i= i+2){
                //console.log('They see me loopin...' + i + " || " + callOutLat + "," +  callOutLng + "," + locs[i] + "," + locs[i+1]);
                dist = getDistanceFromLatLon(callOutLat, callOutLng, locs[i], locs[i+1]);
                if (dist < retVal) retVal = dist;
                //console.log(dist + 'iteration ' + [i]);
            }
            return retVal.toFixed(2);
        }

        function indexOfMinPostiveValue(arr) {
            if (arr.length === 0) {
                return -1;
            }

            var min = 999999;
            var minIndex = 0;

            for (var i = 1; i < arr.length; i++) {
                if (arr[i] != 0) {
                    if (arr[i] < min) {
                        minIndex = i;
                        min = arr[i];
                    }
                }
            }

            return minIndex;
        }

        function getDistanceFromLatLon(lat1, lon1, lat2, lon2) {
            var R = 3961; // Radius of the earth in miles
            var dLat = deg2rad(lat2 - lat1); // deg2rad below
            var dLon = deg2rad(lon2 - lon1);
            var a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            var d = R * c; // Distance in km
            return d;
        }

        function deg2rad(deg) {
            return deg * (Math.PI / 180)
        }
        </script>
    </head>
    <body>
    <apex:pageBlock title="Find Nearest Resource">
    <h1>Please enter a postcode to search</h1>
        <form action="https://www.mapquestapi.com/directions/v2/routematrix?key={!$Setup.STKR__nearestTechSettings__c.STKR__Mapquest_API_Key__c}" method="POST" id="matrixForm">
            <b>Post Code:</b>
            <input type="text" name="location" id="location" value="{!$CurrentPage.parameters.postcode}" /> <input type="submit" name="submit" value="Find Nearest Tech" />        
        </form>         
        <div id="result">
        </div>
        <br/>
        <div id="map"></div>
        <div id="availability">
            <div id="toggleBox">View Tech Availability (Click to toggle)</div>
            <table id="availablityResults">
    
            </table>
        </div>
        </apex:pageBlock>
    </body>
    </apex:variable>
    </html>
</apex:page>